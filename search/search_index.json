{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"yatta-py","text":""},{"location":"#introduction","title":"Introduction","text":"<p>yatta-py is an async API wrapper for Project Yatta written in Python. Project Yatta is a beautiful website that displays Honkai: Star Rail game data. Developing something for Hoyoverse games? You might be interested in other API wrappers written by me.</p> <p>Note: I am not the developer of Project Yatta.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fully typed.</li> <li>Fully asynchronous by using <code>aiofiles</code>, <code>aiohttp</code>, and <code>asyncio</code>, suitable for Discord bots.</li> <li>Provides direct icon URLs.</li> <li>Supports Python 3.11+.</li> <li>Supports all game languages.</li> <li>Supports persistent caching using SQLite.</li> <li>Supports Pydantic V2, this also means full autocomplete support.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code># poetry\npoetry add yatta-py\n\n# pip\npip install yatta-py\n</code></pre>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>import yatta\nimport asyncio\n\nasync def main() -&gt; None:\n    async with yatta.YattaAPI(yatta.Language.CHT) as client:\n        await client.fetch_characters()\n\nasyncio.run(main())\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Read the documentation to learn more about on how to use this wrapper.</p>"},{"location":"#questions-issues-feedback-contributions","title":"Questions, Issues, Feedback, Contributions","text":"<p>Whether you want to make any bug reports, feature requests, or contribute to the wrapper, simply open an issue or pull request in this repository. If GitHub is not your type, you can find me on Discord, my username is @seria_ati.</p>"},{"location":"client/","title":"API Reference","text":""},{"location":"client/#yatta.client","title":"client","text":"<p>Classes:</p> <ul> <li> <code>YattaAPI</code>           \u2013            <p>The main class to interact with the Project Yatta API.</p> </li> </ul>"},{"location":"client/#yatta.client.CACHE_PATH","title":"CACHE_PATH  <code>module-attribute</code>","text":"<pre><code>CACHE_PATH = Path('./.cache/yatta')\n</code></pre>"},{"location":"client/#yatta.client.YattaAPI","title":"YattaAPI","text":"<p>The main class to interact with the Project Yatta API.</p> <p>Provide asynchronous methods to fetch various game data like characters, light cones, relics, items, etc. Support caching via aiohttp-client-cache.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>close</code>             \u2013              <p>Close the internal aiohttp session.</p> </li> <li> <code>fetch_book_detail</code>             \u2013              <p>Fetch detailed information for a specific book.</p> </li> <li> <code>fetch_books</code>             \u2013              <p>Fetch a list of all available books.</p> </li> <li> <code>fetch_changelogs</code>             \u2013              <p>Fetch a list of all available changelogs.</p> </li> <li> <code>fetch_character_detail</code>             \u2013              <p>Fetch detailed information for a specific character.</p> </li> <li> <code>fetch_characters</code>             \u2013              <p>Fetch a list of all available characters.</p> </li> <li> <code>fetch_item_detail</code>             \u2013              <p>Fetch detailed information for a specific item.</p> </li> <li> <code>fetch_items</code>             \u2013              <p>Fetch a list of all available items.</p> </li> <li> <code>fetch_latest_version</code>             \u2013              <p>Fetch the latest data version hash from the API.</p> </li> <li> <code>fetch_light_cone_detail</code>             \u2013              <p>Fetch detailed information for a specific light cone.</p> </li> <li> <code>fetch_light_cones</code>             \u2013              <p>Fetch a list of all available light cones.</p> </li> <li> <code>fetch_manual_avatar</code>             \u2013              <p>Fetch manual avatar data, typically used for stat mappings.</p> </li> <li> <code>fetch_message_types</code>             \u2013              <p>Fetch a mapping of message type IDs to their names.</p> </li> <li> <code>fetch_messages</code>             \u2013              <p>Fetch a list of all available message threads.</p> </li> <li> <code>fetch_relic_set_detail</code>             \u2013              <p>Fetch detailed information for a specific relic set.</p> </li> <li> <code>fetch_relic_sets</code>             \u2013              <p>Fetch a list of all available relic sets.</p> </li> <li> <code>start</code>             \u2013              <p>Initialize the internal aiohttp session.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>BASE_URL</code>               (<code>Final[str]</code>)           \u2013            </li> <li> <code>cache_ttl</code>           \u2013            </li> <li> <code>lang</code>           \u2013            </li> </ul>"},{"location":"client/#yatta.client.YattaAPI(lang)","title":"<code>lang</code>","text":"(<code>Language</code>, default:                   <code>EN</code> )           \u2013            <p>The language to use for API responses. Defaults to Language.EN.</p>"},{"location":"client/#yatta.client.YattaAPI(cache_ttl)","title":"<code>cache_ttl</code>","text":"(<code>int</code>, default:                   <code>3600</code> )           \u2013            <p>The time-to-live for the cache in seconds. Defaults to 3600 (1 hour).</p>"},{"location":"client/#yatta.client.YattaAPI(headers)","title":"<code>headers</code>","text":"(<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Optional dictionary of headers to include in requests.</p>"},{"location":"client/#yatta.client.YattaAPI(session)","title":"<code>session</code>","text":"(<code>ClientSession | None</code>, default:                   <code>None</code> )           \u2013            <p>Optional existing aiohttp.ClientSession to use. If None, a new      CachedSession will be created.</p>"},{"location":"client/#yatta.client.YattaAPI(cache_backend)","title":"<code>cache_backend</code>","text":"(<code>CacheBackend | None</code>, default:                   <code>None</code> )           \u2013            <p>Optional CacheBackend instance for caching. If None,            a SQLite backend will be used with a default path.</p>"},{"location":"client/#yatta.client.YattaAPI.BASE_URL","title":"BASE_URL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BASE_URL: Final[str] = 'https://sr.yatta.moe/api/v2'\n</code></pre>"},{"location":"client/#yatta.client.YattaAPI.cache_ttl","title":"cache_ttl  <code>instance-attribute</code>","text":"<pre><code>cache_ttl = cache_ttl\n</code></pre>"},{"location":"client/#yatta.client.YattaAPI.lang","title":"lang  <code>instance-attribute</code>","text":"<pre><code>lang = lang\n</code></pre>"},{"location":"client/#yatta.client.YattaAPI.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the internal aiohttp session.</p> <p>Should be called to release resources if not using <code>async with</code>.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_book_detail","title":"fetch_book_detail  <code>async</code>","text":"<pre><code>fetch_book_detail(id: int, use_cache: bool = True) -&gt; BookDetail\n</code></pre> <p>Fetch detailed information for a specific book.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>BookDetail</code>           \u2013            <p>A BookDetail object containing detailed book information.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DataNotFoundError</code>             \u2013            <p>If no book with the given ID is found.</p> </li> <li> <code>YattaAPIError</code>             \u2013            <p>For other API errors.</p> </li> </ul>"},{"location":"client/#yatta.client.YattaAPI.fetch_book_detail(id)","title":"<code>id</code>","text":"(<code>int</code>)           \u2013            <p>The unique identifier of the book.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_book_detail(use_cache)","title":"<code>use_cache</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow the response to be served from cache. Defaults to True.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_books","title":"fetch_books  <code>async</code>","text":"<pre><code>fetch_books(use_cache: bool = True) -&gt; list[Book]\n</code></pre> <p>Fetch a list of all available books.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[Book]</code>           \u2013            <p>A list of Book objects.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DataNotFoundError</code>             \u2013            <p>If the book list endpoint returns 404.</p> </li> <li> <code>YattaAPIError</code>             \u2013            <p>For other API errors.</p> </li> </ul>"},{"location":"client/#yatta.client.YattaAPI.fetch_books(use_cache)","title":"<code>use_cache</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow the response to be served from cache. Defaults to True.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_changelogs","title":"fetch_changelogs  <code>async</code>","text":"<pre><code>fetch_changelogs(use_cache: bool = True) -&gt; list[Changelog]\n</code></pre> <p>Fetch a list of all available changelogs.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[Changelog]</code>           \u2013            <p>A list of Changelog objects.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DataNotFoundError</code>             \u2013            <p>If the changelog endpoint returns 404.</p> </li> <li> <code>YattaAPIError</code>             \u2013            <p>For other API errors.</p> </li> </ul>"},{"location":"client/#yatta.client.YattaAPI.fetch_changelogs(use_cache)","title":"<code>use_cache</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow the response to be served from cache. Defaults to True.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_character_detail","title":"fetch_character_detail  <code>async</code>","text":"<pre><code>fetch_character_detail(id: int, use_cache: bool = True) -&gt; CharacterDetail\n</code></pre> <p>Fetch detailed information for a specific character.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>CharacterDetail</code>           \u2013            <p>A CharacterDetail object containing detailed character information.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DataNotFoundError</code>             \u2013            <p>If no character with the given ID is found.</p> </li> <li> <code>YattaAPIError</code>             \u2013            <p>For other API errors.</p> </li> </ul>"},{"location":"client/#yatta.client.YattaAPI.fetch_character_detail(id)","title":"<code>id</code>","text":"(<code>int</code>)           \u2013            <p>The unique identifier of the character.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_character_detail(use_cache)","title":"<code>use_cache</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow the response to be served from cache. Defaults to True.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_characters","title":"fetch_characters  <code>async</code>","text":"<pre><code>fetch_characters(use_cache: bool = True) -&gt; list[Character]\n</code></pre> <p>Fetch a list of all available characters.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[Character]</code>           \u2013            <p>A list of Character objects.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DataNotFoundError</code>             \u2013            <p>If the character list endpoint returns 404.</p> </li> <li> <code>YattaAPIError</code>             \u2013            <p>For other API errors.</p> </li> </ul>"},{"location":"client/#yatta.client.YattaAPI.fetch_characters(use_cache)","title":"<code>use_cache</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow the response to be served from cache. Defaults to True.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_item_detail","title":"fetch_item_detail  <code>async</code>","text":"<pre><code>fetch_item_detail(id: int, use_cache: bool = True) -&gt; ItemDetail\n</code></pre> <p>Fetch detailed information for a specific item.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>ItemDetail</code>           \u2013            <p>An ItemDetail object containing detailed item information.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DataNotFoundError</code>             \u2013            <p>If no item with the given ID is found.</p> </li> <li> <code>YattaAPIError</code>             \u2013            <p>For other API errors.</p> </li> </ul>"},{"location":"client/#yatta.client.YattaAPI.fetch_item_detail(id)","title":"<code>id</code>","text":"(<code>int</code>)           \u2013            <p>The unique identifier of the item.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_item_detail(use_cache)","title":"<code>use_cache</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow the response to be served from cache. Defaults to True.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_items","title":"fetch_items  <code>async</code>","text":"<pre><code>fetch_items(use_cache: bool = True) -&gt; list[Item]\n</code></pre> <p>Fetch a list of all available items.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[Item]</code>           \u2013            <p>A list of Item objects.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DataNotFoundError</code>             \u2013            <p>If the item list endpoint returns 404.</p> </li> <li> <code>YattaAPIError</code>             \u2013            <p>For other API errors.</p> </li> </ul>"},{"location":"client/#yatta.client.YattaAPI.fetch_items(use_cache)","title":"<code>use_cache</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow the response to be served from cache. Defaults to True.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_latest_version","title":"fetch_latest_version  <code>async</code>","text":"<pre><code>fetch_latest_version() -&gt; str\n</code></pre> <p>Fetch the latest data version hash from the API.</p> <p>This bypasses the regular cache to ensure the absolute latest version is retrieved.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The latest version hash string.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>YattaAPIError</code>             \u2013            <p>For API errors during the fetch.</p> </li> </ul>"},{"location":"client/#yatta.client.YattaAPI.fetch_light_cone_detail","title":"fetch_light_cone_detail  <code>async</code>","text":"<pre><code>fetch_light_cone_detail(id: int, use_cache: bool = True) -&gt; LightConeDetail\n</code></pre> <p>Fetch detailed information for a specific light cone.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>LightConeDetail</code>           \u2013            <p>A LightConeDetail object containing detailed light cone information.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DataNotFoundError</code>             \u2013            <p>If no light cone with the given ID is found.</p> </li> <li> <code>YattaAPIError</code>             \u2013            <p>For other API errors.</p> </li> </ul>"},{"location":"client/#yatta.client.YattaAPI.fetch_light_cone_detail(id)","title":"<code>id</code>","text":"(<code>int</code>)           \u2013            <p>The unique identifier of the light cone.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_light_cone_detail(use_cache)","title":"<code>use_cache</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow the response to be served from cache. Defaults to True.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_light_cones","title":"fetch_light_cones  <code>async</code>","text":"<pre><code>fetch_light_cones(use_cache: bool = True) -&gt; list[LightCone]\n</code></pre> <p>Fetch a list of all available light cones.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[LightCone]</code>           \u2013            <p>A list of LightCone objects.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DataNotFoundError</code>             \u2013            <p>If the light cone list endpoint returns 404.</p> </li> <li> <code>YattaAPIError</code>             \u2013            <p>For other API errors.</p> </li> </ul>"},{"location":"client/#yatta.client.YattaAPI.fetch_light_cones(use_cache)","title":"<code>use_cache</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow the response to be served from cache. Defaults to True.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_manual_avatar","title":"fetch_manual_avatar  <code>async</code>","text":"<pre><code>fetch_manual_avatar(use_cache: bool = True) -&gt; dict[str, dict[str, str]]\n</code></pre> <p>Fetch manual avatar data, typically used for stat mappings.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, dict[str, str]]</code>           \u2013            <p>A dictionary containing manual avatar data, often mapping stat keys to names and icons.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DataNotFoundError</code>             \u2013            <p>If the manual avatar endpoint returns 404.</p> </li> <li> <code>YattaAPIError</code>             \u2013            <p>For other API errors.</p> </li> </ul>"},{"location":"client/#yatta.client.YattaAPI.fetch_manual_avatar(use_cache)","title":"<code>use_cache</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow the response to be served from cache. Defaults to True.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_message_types","title":"fetch_message_types  <code>async</code>","text":"<pre><code>fetch_message_types(use_cache: bool = True) -&gt; dict[str, str]\n</code></pre> <p>Fetch a mapping of message type IDs to their names.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, str]</code>           \u2013            <p>A dictionary where keys are message type IDs (as strings) and values are type names.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DataNotFoundError</code>             \u2013            <p>If the message endpoint returns 404.</p> </li> <li> <code>YattaAPIError</code>             \u2013            <p>For other API errors.</p> </li> </ul>"},{"location":"client/#yatta.client.YattaAPI.fetch_message_types(use_cache)","title":"<code>use_cache</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow the response to be served from cache. Defaults to True.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_messages","title":"fetch_messages  <code>async</code>","text":"<pre><code>fetch_messages(use_cache: bool = True) -&gt; list[Message]\n</code></pre> <p>Fetch a list of all available message threads.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[Message]</code>           \u2013            <p>A list of Message objects.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DataNotFoundError</code>             \u2013            <p>If the message list endpoint returns 404.</p> </li> <li> <code>YattaAPIError</code>             \u2013            <p>For other API errors.</p> </li> </ul>"},{"location":"client/#yatta.client.YattaAPI.fetch_messages(use_cache)","title":"<code>use_cache</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow the response to be served from cache. Defaults to True.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_relic_set_detail","title":"fetch_relic_set_detail  <code>async</code>","text":"<pre><code>fetch_relic_set_detail(id: int, use_cache: bool = True) -&gt; RelicSetDetail\n</code></pre> <p>Fetch detailed information for a specific relic set.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>RelicSetDetail</code>           \u2013            <p>A RelicSetDetail object containing detailed relic set information.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DataNotFoundError</code>             \u2013            <p>If no relic set with the given ID is found.</p> </li> <li> <code>YattaAPIError</code>             \u2013            <p>For other API errors.</p> </li> </ul>"},{"location":"client/#yatta.client.YattaAPI.fetch_relic_set_detail(id)","title":"<code>id</code>","text":"(<code>int</code>)           \u2013            <p>The unique identifier of the relic set.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_relic_set_detail(use_cache)","title":"<code>use_cache</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow the response to be served from cache. Defaults to True.</p>"},{"location":"client/#yatta.client.YattaAPI.fetch_relic_sets","title":"fetch_relic_sets  <code>async</code>","text":"<pre><code>fetch_relic_sets(use_cache: bool = True) -&gt; list[RelicSet]\n</code></pre> <p>Fetch a list of all available relic sets.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[RelicSet]</code>           \u2013            <p>A list of RelicSet objects.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DataNotFoundError</code>             \u2013            <p>If the relic list endpoint returns 404.</p> </li> <li> <code>YattaAPIError</code>             \u2013            <p>For other API errors.</p> </li> </ul>"},{"location":"client/#yatta.client.YattaAPI.fetch_relic_sets(use_cache)","title":"<code>use_cache</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to allow the response to be served from cache. Defaults to True.</p>"},{"location":"client/#yatta.client.YattaAPI.start","title":"start  <code>async</code>","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Initialize the internal aiohttp session.</p> <p>Must be called before making any API requests if not using <code>async with</code>.</p>"},{"location":"enums/","title":"API Reference","text":""},{"location":"enums/#yatta.enums","title":"enums","text":"<p>Classes:</p> <ul> <li> <code>CombatType</code>           \u2013            <p>Represent the Combat Types (Elements) in Honkai: Star Rail.</p> </li> <li> <code>Language</code>           \u2013            <p>Enumerate supported languages for the API.</p> </li> <li> <code>PathType</code>           \u2013            <p>Represent the Path types in Honkai: Star Rail.</p> </li> </ul>"},{"location":"enums/#yatta.enums.CombatType","title":"CombatType","text":"<p>Represent the Combat Types (Elements) in Honkai: Star Rail.</p> <p>Attributes:</p> <ul> <li> <code>FIRE</code>           \u2013            </li> <li> <code>ICE</code>           \u2013            </li> <li> <code>IMAGINARY</code>           \u2013            </li> <li> <code>PHYSICAL</code>           \u2013            </li> <li> <code>QUANTUM</code>           \u2013            </li> <li> <code>THUNDER</code>           \u2013            </li> <li> <code>WIND</code>           \u2013            </li> </ul>"},{"location":"enums/#yatta.enums.CombatType.FIRE","title":"FIRE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FIRE = 'Fire'\n</code></pre>"},{"location":"enums/#yatta.enums.CombatType.ICE","title":"ICE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ICE = 'Ice'\n</code></pre>"},{"location":"enums/#yatta.enums.CombatType.IMAGINARY","title":"IMAGINARY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>IMAGINARY = 'Imaginary'\n</code></pre>"},{"location":"enums/#yatta.enums.CombatType.PHYSICAL","title":"PHYSICAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PHYSICAL = 'Physical'\n</code></pre>"},{"location":"enums/#yatta.enums.CombatType.QUANTUM","title":"QUANTUM  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>QUANTUM = 'Quantum'\n</code></pre>"},{"location":"enums/#yatta.enums.CombatType.THUNDER","title":"THUNDER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>THUNDER = 'Thunder'\n</code></pre>"},{"location":"enums/#yatta.enums.CombatType.WIND","title":"WIND  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WIND = 'Wind'\n</code></pre>"},{"location":"enums/#yatta.enums.Language","title":"Language","text":"<p>Enumerate supported languages for the API.</p> <p>Attributes:</p> <ul> <li> <code>CHT</code>           \u2013            <p>Traditional Chinese</p> </li> <li> <code>CN</code>           \u2013            <p>Simplified Chinese</p> </li> <li> <code>DE</code>           \u2013            <p>German</p> </li> <li> <code>EN</code>           \u2013            <p>English</p> </li> <li> <code>ES</code>           \u2013            <p>Spanish</p> </li> <li> <code>FR</code>           \u2013            <p>French</p> </li> <li> <code>ID</code>           \u2013            <p>Indonesian</p> </li> <li> <code>JP</code>           \u2013            <p>Japanese</p> </li> <li> <code>KR</code>           \u2013            <p>Korean</p> </li> <li> <code>PT</code>           \u2013            <p>Portuguese</p> </li> <li> <code>RU</code>           \u2013            <p>Russian</p> </li> <li> <code>TH</code>           \u2013            <p>Thai</p> </li> <li> <code>VI</code>           \u2013            <p>Vietnamese</p> </li> </ul>"},{"location":"enums/#yatta.enums.Language.CHT","title":"CHT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CHT = 'cht'\n</code></pre> <p>Traditional Chinese</p>"},{"location":"enums/#yatta.enums.Language.CN","title":"CN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CN = 'cn'\n</code></pre> <p>Simplified Chinese</p>"},{"location":"enums/#yatta.enums.Language.DE","title":"DE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DE = 'de'\n</code></pre> <p>German</p>"},{"location":"enums/#yatta.enums.Language.EN","title":"EN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EN = 'en'\n</code></pre> <p>English</p>"},{"location":"enums/#yatta.enums.Language.ES","title":"ES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ES = 'es'\n</code></pre> <p>Spanish</p>"},{"location":"enums/#yatta.enums.Language.FR","title":"FR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FR = 'fr'\n</code></pre> <p>French</p>"},{"location":"enums/#yatta.enums.Language.ID","title":"ID  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ID = 'id'\n</code></pre> <p>Indonesian</p>"},{"location":"enums/#yatta.enums.Language.JP","title":"JP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>JP = 'jp'\n</code></pre> <p>Japanese</p>"},{"location":"enums/#yatta.enums.Language.KR","title":"KR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>KR = 'kr'\n</code></pre> <p>Korean</p>"},{"location":"enums/#yatta.enums.Language.PT","title":"PT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PT = 'pt'\n</code></pre> <p>Portuguese</p>"},{"location":"enums/#yatta.enums.Language.RU","title":"RU  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RU = 'ru'\n</code></pre> <p>Russian</p>"},{"location":"enums/#yatta.enums.Language.TH","title":"TH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TH = 'th'\n</code></pre> <p>Thai</p>"},{"location":"enums/#yatta.enums.Language.VI","title":"VI  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>VI = 'vi'\n</code></pre> <p>Vietnamese</p>"},{"location":"enums/#yatta.enums.PathType","title":"PathType","text":"<p>Represent the Path types in Honkai: Star Rail.</p> <p>Attributes:</p> <ul> <li> <code>KNIGHT</code>           \u2013            <p>Preservation</p> </li> <li> <code>MAGE</code>           \u2013            <p>Erudition</p> </li> <li> <code>MEMORY</code>           \u2013            <p>Remembrance</p> </li> <li> <code>PRIEST</code>           \u2013            <p>Abundance</p> </li> <li> <code>ROGUE</code>           \u2013            <p>The Hunt</p> </li> <li> <code>SHAMAN</code>           \u2013            <p>Harmony</p> </li> <li> <code>WARLOCK</code>           \u2013            <p>Nihility</p> </li> <li> <code>WARRIOR</code>           \u2013            <p>Destruction</p> </li> </ul>"},{"location":"enums/#yatta.enums.PathType.KNIGHT","title":"KNIGHT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>KNIGHT = 'Knight'\n</code></pre> <p>Preservation</p>"},{"location":"enums/#yatta.enums.PathType.MAGE","title":"MAGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MAGE = 'Mage'\n</code></pre> <p>Erudition</p>"},{"location":"enums/#yatta.enums.PathType.MEMORY","title":"MEMORY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MEMORY = 'Memory'\n</code></pre> <p>Remembrance</p>"},{"location":"enums/#yatta.enums.PathType.PRIEST","title":"PRIEST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PRIEST = 'Priest'\n</code></pre> <p>Abundance</p>"},{"location":"enums/#yatta.enums.PathType.ROGUE","title":"ROGUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ROGUE = 'Rogue'\n</code></pre> <p>The Hunt</p>"},{"location":"enums/#yatta.enums.PathType.SHAMAN","title":"SHAMAN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SHAMAN = 'Shaman'\n</code></pre> <p>Harmony</p>"},{"location":"enums/#yatta.enums.PathType.WARLOCK","title":"WARLOCK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WARLOCK = 'Warlock'\n</code></pre> <p>Nihility</p>"},{"location":"enums/#yatta.enums.PathType.WARRIOR","title":"WARRIOR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WARRIOR = 'Warrior'\n</code></pre> <p>Destruction</p>"},{"location":"exceptions/","title":"API Reference","text":""},{"location":"exceptions/#yatta.exceptions","title":"exceptions","text":"<p>Classes:</p> <ul> <li> <code>ConnectionTimeoutError</code>           \u2013            <p>Raise when the connection to the API times out (HTTP 522).</p> </li> <li> <code>DataNotFoundError</code>           \u2013            <p>Raise when requested data is not found (HTTP 404).</p> </li> <li> <code>YattaAPIError</code>           \u2013            <p>Raise for yatta-py API errors.</p> </li> </ul>"},{"location":"exceptions/#yatta.exceptions.ConnectionTimeoutError","title":"ConnectionTimeoutError","text":"<p>Raise when the connection to the API times out (HTTP 522).</p>"},{"location":"exceptions/#yatta.exceptions.DataNotFoundError","title":"DataNotFoundError","text":"<p>Raise when requested data is not found (HTTP 404).</p>"},{"location":"exceptions/#yatta.exceptions.YattaAPIError","title":"YattaAPIError","text":"<p>Raise for yatta-py API errors.</p> <p>Attributes:</p> <ul> <li> <code>code</code>           \u2013            </li> </ul>"},{"location":"exceptions/#yatta.exceptions.YattaAPIError.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#installation","title":"Installation","text":"<pre><code>pip install yatta-py\n</code></pre>"},{"location":"getting_started/#usage","title":"Usage","text":"<p>Every API call goes through the <code>YattaAPI</code> class. You can see more details in the API Reference.</p> <pre><code>import yatta\n\nasync with yatta.YattaAPI(yatta.Language.CHT) as api:\n    characters = await api.fetch_characters()\n    print(characters)\n</code></pre> <p>Overall, it's pretty straightforward. You can find all the available methods in the API Reference.</p>"},{"location":"getting_started/#tips","title":"Tips","text":""},{"location":"getting_started/#starting-and-closing-the-client-properly","title":"Starting and Closing the Client Properly","text":"<p>Remember to call <code>start()</code> and <code>close()</code> or use <code>async with</code> to ensure proper connection management.</p> <pre><code>import yatta\n\nasync with yatta.YattaAPI() as api:\n    ...\n\n# OR\napi = yatta.YattaAPI()\nawait api.start()\n...\nawait api.close()\n</code></pre>"},{"location":"getting_started/#finding-model-attributes","title":"Finding Model Attributes","text":"<p>Refer to the Models section for a list of all available models and their attributes.</p>"},{"location":"getting_started/#catching-errors","title":"Catching Errors","text":"<p>Refer to the Exceptions section for a list of all available exceptions, catch them with <code>try/except</code> blocks.</p> <pre><code>import yatta\n\nasync with yatta.YattaAPI() as api:\n    try:\n        await api.fetch_character(0)\n    except yatta.exceptions.DataNotFoundError:\n        print(\"Character does not exist.\")\n</code></pre>"},{"location":"models/","title":"API Reference","text":""},{"location":"models/#yatta.models","title":"models","text":"<p>Modules:</p> <ul> <li> <code>base</code>           \u2013            </li> <li> <code>book</code>           \u2013            </li> <li> <code>change_log</code>           \u2013            </li> <li> <code>character</code>           \u2013            </li> <li> <code>item</code>           \u2013            </li> <li> <code>light_cone</code>           \u2013            </li> <li> <code>message</code>           \u2013            </li> <li> <code>relic</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>BaseSkill</code>           \u2013            <p>Represent a base skill or a trace node in the character's skill tree.</p> </li> <li> <code>Book</code>           \u2013            <p>Represent basic information about a book.</p> </li> <li> <code>BookDetail</code>           \u2013            <p>Represent detailed information about a book.</p> </li> <li> <code>BookSeries</code>           \u2013            <p>Represent a book series.</p> </li> <li> <code>Changelog</code>           \u2013            <p>Represent a changelog entry for a specific version.</p> </li> <li> <code>ChangelogCategory</code>           \u2013            <p>Represent a category of changes within a changelog entry.</p> </li> <li> <code>Character</code>           \u2013            <p>Represent basic information about a character.</p> </li> <li> <code>CharacterAscensionItem</code>           \u2013            <p>Represent an item and amount required for character ascension.</p> </li> <li> <code>CharacterCostItem</code>           \u2013            <p>Represent an item and amount required for character level upgrades.</p> </li> <li> <code>CharacterDetail</code>           \u2013            <p>Represent detailed information about a character.</p> </li> <li> <code>CharacterDetailType</code>           \u2013            <p>Represent either the Path or Combat Type with its ID and name.</p> </li> <li> <code>CharacterDetailTypes</code>           \u2013            <p>Contain the character's Path and Combat Type details.</p> </li> <li> <code>CharacterEidolon</code>           \u2013            <p>Represent a character Eidolon.</p> </li> <li> <code>CharacterInfo</code>           \u2013            <p>Represent additional information about a character (fetter info).</p> </li> <li> <code>CharacterScript</code>           \u2013            <p>Contain character stories and voice lines.</p> </li> <li> <code>CharacterStory</code>           \u2013            <p>Represent a piece of character story/lore.</p> </li> <li> <code>CharacterTraces</code>           \u2013            <p>Contain all character traces (skills and passive abilities).</p> </li> <li> <code>CharacterType</code>           \u2013            <p>Contain the character's Path and Combat Type enums.</p> </li> <li> <code>CharacterUpgrade</code>           \u2013            <p>Represent the details for a specific character ascension rank.</p> </li> <li> <code>CharacterVoice</code>           \u2013            <p>Represent a character voice line.</p> </li> <li> <code>Contact</code>           \u2013            <p>Represent a message contact.</p> </li> <li> <code>ExtraEffect</code>           \u2013            <p>Represent an extra effect associated with a skill.</p> </li> <li> <code>Item</code>           \u2013            <p>Represent basic information about an item.</p> </li> <li> <code>ItemDetail</code>           \u2013            <p>Represent detailed information about an item.</p> </li> <li> <code>ItemSource</code>           \u2013            <p>Represent a source from which an item can be obtained.</p> </li> <li> <code>ItemType</code>           \u2013            <p>Represent the type of an item.</p> </li> <li> <code>LightCone</code>           \u2013            <p>Represent basic information about a light cone.</p> </li> <li> <code>LightConeAscensionMaterial</code>           \u2013            <p>Represent a material required for light cone ascension.</p> </li> <li> <code>LightConeCostItem</code>           \u2013            <p>Represent an item and its amount required for upgrading a light cone.</p> </li> <li> <code>LightConeDetail</code>           \u2013            <p>Represent detailed information about a light cone.</p> </li> <li> <code>LightConePathType</code>           \u2013            <p>Represent the path type of a light cone.</p> </li> <li> <code>LightConeSkill</code>           \u2013            <p>Represent the skill of a light cone.</p> </li> <li> <code>LightConeUpgrade</code>           \u2013            <p>Represent the details for a specific ascension level of a light cone.</p> </li> <li> <code>Message</code>           \u2013            <p>Represent a message thread or conversation.</p> </li> <li> <code>Recipe</code>           \u2013            <p>Represent a recipe to craft or obtain an item.</p> </li> <li> <code>RecipeMaterial</code>           \u2013            <p>Represent a material required for a recipe.</p> </li> <li> <code>Relic</code>           \u2013            <p>Represent a single relic piece.</p> </li> <li> <code>RelicSet</code>           \u2013            <p>Represent basic information about a relic set.</p> </li> <li> <code>RelicSetDetail</code>           \u2013            <p>Represent detailed information about a relic set.</p> </li> <li> <code>SetEffect</code>           \u2013            <p>Represent a set effect for a relic set.</p> </li> <li> <code>SetEffects</code>           \u2013            <p>Contain the 2-piece and 4-piece set effects.</p> </li> <li> <code>SkillAdd</code>           \u2013            <p>Represent a skill level increase granted by an Eidolon.</p> </li> <li> <code>SkillListSkill</code>           \u2013            <p>Represent detailed information about a specific character skill (Basic ATK, Skill, Ultimate, Talent).</p> </li> <li> <code>SkillPoint</code>           \u2013            <p>Represent skill point generation or consumption by a skill.</p> </li> <li> <code>SkillPromote</code>           \u2013            <p>Represent the cost to promote (level up) a skill/trace to a specific level.</p> </li> <li> <code>SkillPromoteCostItem</code>           \u2013            <p>Represent an item and amount required for promoting (leveling up) a skill/trace.</p> </li> <li> <code>SkillTree</code>           \u2013            <p>Represent a skill tree structure for a character.</p> </li> <li> <code>SkillTreeSkill</code>           \u2013            <p>Represent a connection or node within a skill tree structure.</p> </li> <li> <code>Status</code>           \u2013            <p>Represent a status effect or stat bonus granted by a trace node.</p> </li> <li> <code>VoiceActor</code>           \u2013            <p>Represent a voice actor for a specific language.</p> </li> <li> <code>WeaknessBreak</code>           \u2013            <p>Represent the toughness damage dealt by a skill.</p> </li> </ul>"},{"location":"models/#yatta.models.BaseSkill","title":"BaseSkill  <code>pydantic-model</code>","text":"<p>Represent a base skill or a trace node in the character's skill tree.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The unique identifier for the skill or trace node.</p> </li> <li> <code>name</code>               (<code>str | None</code>)           \u2013            <p>The name of the skill or trace node (optional for some traces).</p> </li> <li> <code>description</code>               (<code>str | None</code>)           \u2013            <p>The description of the skill or trace node (optional for some traces).</p> </li> <li> <code>point_type</code>               (<code>str</code>)           \u2013            <p>The type of point in the skill tree.</p> </li> <li> <code>point_position</code>               (<code>str</code>)           \u2013            <p>The position identifier within the skill tree.</p> </li> <li> <code>max_level</code>               (<code>int</code>)           \u2013            <p>The maximum level this skill or trace can reach.</p> </li> <li> <code>is_default</code>               (<code>bool</code>)           \u2013            <p>Whether this skill/trace is unlocked by default.</p> </li> <li> <code>avatar_level_limit</code>               (<code>int | None</code>)           \u2013            <p>The character level required to unlock this trace (optional).</p> </li> <li> <code>avatar_promotion_limit</code>               (<code>int | None</code>)           \u2013            <p>The character ascension rank required to unlock this trace (optional).</p> </li> <li> <code>skill_list</code>               (<code>list[SkillListSkill]</code>)           \u2013            <p>Detailed information if this node represents a main skill (Basic ATK, Skill, etc.).</p> </li> <li> <code>status_list</code>               (<code>list[Status]</code>)           \u2013            <p>List of status effects or stat bonuses granted by this trace node.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the icon for this skill or trace node.</p> </li> <li> <code>params</code>               (<code>dict[str, list[float]] | None</code>)           \u2013            <p>Parameters used for scaling (optional).</p> </li> <li> <code>promote</code>               (<code>list[SkillPromote]</code>)           \u2013            <p>List of promotion costs for leveling up this skill or trace.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>description</code>                 (<code>str | None</code>)             </li> <li> <code>point_type</code>                 (<code>str</code>)             </li> <li> <code>point_position</code>                 (<code>str</code>)             </li> <li> <code>max_level</code>                 (<code>int</code>)             </li> <li> <code>is_default</code>                 (<code>bool</code>)             </li> <li> <code>avatar_level_limit</code>                 (<code>int | None</code>)             </li> <li> <code>avatar_promotion_limit</code>                 (<code>int | None</code>)             </li> <li> <code>skill_list</code>                 (<code>list[SkillListSkill]</code>)             </li> <li> <code>status_list</code>                 (<code>list[Status]</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> <li> <code>params</code>                 (<code>dict[str, list[float]] | None</code>)             </li> <li> <code>promote</code>                 (<code>list[SkillPromote]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_skill_list</code>                 \u2192                   <code>skill_list</code> </li> <li> <code>__convert_status_list</code>                 \u2192                   <code>status_list</code> </li> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> <li> <code>__convert_promote</code>                 \u2192                   <code>promote</code> </li> </ul>"},{"location":"models/#yatta.models.BaseSkill.avatar_level_limit","title":"avatar_level_limit  <code>pydantic-field</code>","text":"<pre><code>avatar_level_limit: int | None\n</code></pre>"},{"location":"models/#yatta.models.BaseSkill.avatar_promotion_limit","title":"avatar_promotion_limit  <code>pydantic-field</code>","text":"<pre><code>avatar_promotion_limit: int | None\n</code></pre>"},{"location":"models/#yatta.models.BaseSkill.description","title":"description  <code>pydantic-field</code>","text":"<pre><code>description: str | None\n</code></pre>"},{"location":"models/#yatta.models.BaseSkill.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.BaseSkill.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.BaseSkill.is_default","title":"is_default  <code>pydantic-field</code>","text":"<pre><code>is_default: bool\n</code></pre>"},{"location":"models/#yatta.models.BaseSkill.max_level","title":"max_level  <code>pydantic-field</code>","text":"<pre><code>max_level: int\n</code></pre>"},{"location":"models/#yatta.models.BaseSkill.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str | None\n</code></pre>"},{"location":"models/#yatta.models.BaseSkill.params","title":"params  <code>pydantic-field</code>","text":"<pre><code>params: dict[str, list[float]] | None\n</code></pre>"},{"location":"models/#yatta.models.BaseSkill.point_position","title":"point_position  <code>pydantic-field</code>","text":"<pre><code>point_position: str\n</code></pre>"},{"location":"models/#yatta.models.BaseSkill.point_type","title":"point_type  <code>pydantic-field</code>","text":"<pre><code>point_type: str\n</code></pre>"},{"location":"models/#yatta.models.BaseSkill.promote","title":"promote  <code>pydantic-field</code>","text":"<pre><code>promote: list[SkillPromote]\n</code></pre>"},{"location":"models/#yatta.models.BaseSkill.skill_list","title":"skill_list  <code>pydantic-field</code>","text":"<pre><code>skill_list: list[SkillListSkill]\n</code></pre>"},{"location":"models/#yatta.models.BaseSkill.status_list","title":"status_list  <code>pydantic-field</code>","text":"<pre><code>status_list: list[Status]\n</code></pre>"},{"location":"models/#yatta.models.Book","title":"Book  <code>pydantic-model</code>","text":"<p>Represent basic information about a book.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The ID of the book.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the book.</p> </li> <li> <code>world_type</code>               (<code>int</code>)           \u2013            <p>The numeric ID representing the type of world the book is associated with.</p> </li> <li> <code>chapter_count</code>               (<code>int</code>)           \u2013            <p>The number of chapters in the book.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL of the book's icon.</p> </li> <li> <code>route</code>               (<code>str</code>)           \u2013            <p>The API route for this book.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>world_type</code>                 (<code>int</code>)             </li> <li> <code>chapter_count</code>                 (<code>int</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> <li> <code>route</code>                 (<code>str</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> </ul>"},{"location":"models/#yatta.models.Book.chapter_count","title":"chapter_count  <code>pydantic-field</code>","text":"<pre><code>chapter_count: int\n</code></pre>"},{"location":"models/#yatta.models.Book.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.Book.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.Book.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.Book.route","title":"route  <code>pydantic-field</code>","text":"<pre><code>route: str\n</code></pre>"},{"location":"models/#yatta.models.Book.world_type","title":"world_type  <code>pydantic-field</code>","text":"<pre><code>world_type: int\n</code></pre>"},{"location":"models/#yatta.models.BookDetail","title":"BookDetail  <code>pydantic-model</code>","text":"<p>Represent detailed information about a book.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The ID of the book.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the book.</p> </li> <li> <code>world_type</code>               (<code>str</code>)           \u2013            <p>The type of world the book is associated with.</p> </li> <li> <code>chapter_count</code>               (<code>int</code>)           \u2013            <p>The number of chapters in the book.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL of the book's icon.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The description of the book.</p> </li> <li> <code>series</code>               (<code>list[BookSeries]</code>)           \u2013            <p>A list of book series entries contained within this book.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>world_type</code>                 (<code>str</code>)             </li> <li> <code>chapter_count</code>                 (<code>int</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>series</code>                 (<code>list[BookSeries]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> <li> <code>__convert_series</code>                 \u2192                   <code>series</code> </li> </ul>"},{"location":"models/#yatta.models.BookDetail.chapter_count","title":"chapter_count  <code>pydantic-field</code>","text":"<pre><code>chapter_count: int = 0\n</code></pre>"},{"location":"models/#yatta.models.BookDetail.description","title":"description  <code>pydantic-field</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"models/#yatta.models.BookDetail.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.BookDetail.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.BookDetail.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.BookDetail.series","title":"series  <code>pydantic-field</code>","text":"<pre><code>series: list[BookSeries]\n</code></pre>"},{"location":"models/#yatta.models.BookDetail.world_type","title":"world_type  <code>pydantic-field</code>","text":"<pre><code>world_type: str\n</code></pre>"},{"location":"models/#yatta.models.BookSeries","title":"BookSeries  <code>pydantic-model</code>","text":"<p>Represent a book series.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The ID of the series.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the series.</p> </li> <li> <code>story</code>               (<code>str</code>)           \u2013            <p>The story or description of the series.</p> </li> <li> <code>image_list</code>               (<code>list[str]</code>)           \u2013            <p>A list of image URLs associated with the series.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>story</code>                 (<code>str</code>)             </li> <li> <code>image_list</code>                 (<code>list[str]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_image_list</code>                 \u2192                   <code>image_list</code> </li> </ul>"},{"location":"models/#yatta.models.BookSeries.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.BookSeries.image_list","title":"image_list  <code>pydantic-field</code>","text":"<pre><code>image_list: list[str]\n</code></pre>"},{"location":"models/#yatta.models.BookSeries.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.BookSeries.story","title":"story  <code>pydantic-field</code>","text":"<pre><code>story: str\n</code></pre>"},{"location":"models/#yatta.models.Changelog","title":"Changelog  <code>pydantic-model</code>","text":"<p>Represent a changelog entry for a specific version.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The unique identifier for the changelog entry.</p> </li> <li> <code>version</code>               (<code>str</code>)           \u2013            <p>The version string associated with these changes.</p> </li> <li> <code>categories</code>               (<code>list[ChangelogCategory]</code>)           \u2013            <p>A list of categories detailing the changes.</p> </li> <li> <code>beta</code>               (<code>bool</code>)           \u2013            <p>Whether this changelog pertains to a beta version.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>version</code>                 (<code>str</code>)             </li> <li> <code>categories</code>                 (<code>list[ChangelogCategory]</code>)             </li> <li> <code>beta</code>                 (<code>bool</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__coerce_version</code>                 \u2192                   <code>version</code> </li> <li> <code>__convert_categories</code>                 \u2192                   <code>categories</code> </li> </ul>"},{"location":"models/#yatta.models.Changelog.beta","title":"beta  <code>pydantic-field</code>","text":"<pre><code>beta: bool = False\n</code></pre>"},{"location":"models/#yatta.models.Changelog.categories","title":"categories  <code>pydantic-field</code>","text":"<pre><code>categories: list[ChangelogCategory]\n</code></pre>"},{"location":"models/#yatta.models.Changelog.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.Changelog.version","title":"version  <code>pydantic-field</code>","text":"<pre><code>version: str\n</code></pre>"},{"location":"models/#yatta.models.ChangelogCategory","title":"ChangelogCategory  <code>pydantic-model</code>","text":"<p>Represent a category of changes within a changelog entry.</p> <p>Attributes:</p> <ul> <li> <code>category</code>               (<code>str</code>)           \u2013            <p>The name of the category (e.g., \"avatar\", \"equipment\").</p> </li> <li> <code>item_ids</code>               (<code>list[int]</code>)           \u2013            <p>A list of item IDs that were changed within this category.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>category</code>                 (<code>str</code>)             </li> <li> <code>item_ids</code>                 (<code>list[int]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__intify_ids</code>                 \u2192                   <code>item_ids</code> </li> </ul>"},{"location":"models/#yatta.models.ChangelogCategory.category","title":"category  <code>pydantic-field</code>","text":"<pre><code>category: str\n</code></pre>"},{"location":"models/#yatta.models.ChangelogCategory.item_ids","title":"item_ids  <code>pydantic-field</code>","text":"<pre><code>item_ids: list[int]\n</code></pre>"},{"location":"models/#yatta.models.Character","title":"Character  <code>pydantic-model</code>","text":"<p>Represent basic information about a character.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The unique identifier for the character.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the character.</p> </li> <li> <code>rarity</code>               (<code>int</code>)           \u2013            <p>The rarity (star rating) of the character.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the character's standard avatar icon.</p> </li> <li> <code>types</code>               (<code>CharacterType</code>)           \u2013            <p>Container for the character's Path and Combat Type enums.</p> </li> <li> <code>route</code>               (<code>str</code>)           \u2013            <p>The API route for this character.</p> </li> <li> <code>beta</code>               (<code>bool</code>)           \u2013            <p>Whether the character is currently in beta.</p> </li> <li> <code>release_at</code>               (<code>datetime | None</code>)           \u2013            <p>Datetime object representing the release timestamp (optional).</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>rarity</code>                 (<code>int</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> <li> <code>types</code>                 (<code>CharacterType</code>)             </li> <li> <code>route</code>                 (<code>str</code>)             </li> <li> <code>beta</code>                 (<code>bool</code>)             </li> <li> <code>release_at</code>                 (<code>datetime | None</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> <li> <code>__convert_release_at</code>                 \u2192                   <code>release_at</code> </li> </ul>"},{"location":"models/#yatta.models.Character.beta","title":"beta  <code>pydantic-field</code>","text":"<pre><code>beta: bool = False\n</code></pre>"},{"location":"models/#yatta.models.Character.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.Character.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.Character.large_icon","title":"large_icon  <code>property</code>","text":"<pre><code>large_icon: str\n</code></pre> <p>Return the URL to the large-sized avatar icon (full splash art).</p>"},{"location":"models/#yatta.models.Character.medium_icon","title":"medium_icon  <code>property</code>","text":"<pre><code>medium_icon: str\n</code></pre> <p>Return the URL to the medium-sized avatar icon.</p>"},{"location":"models/#yatta.models.Character.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.Character.rarity","title":"rarity  <code>pydantic-field</code>","text":"<pre><code>rarity: int\n</code></pre>"},{"location":"models/#yatta.models.Character.release_at","title":"release_at  <code>pydantic-field</code>","text":"<pre><code>release_at: datetime | None = None\n</code></pre>"},{"location":"models/#yatta.models.Character.round_icon","title":"round_icon  <code>property</code>","text":"<pre><code>round_icon: str\n</code></pre> <p>Return the URL to the round avatar icon.</p>"},{"location":"models/#yatta.models.Character.route","title":"route  <code>pydantic-field</code>","text":"<pre><code>route: str\n</code></pre>"},{"location":"models/#yatta.models.Character.types","title":"types  <code>pydantic-field</code>","text":"<pre><code>types: CharacterType\n</code></pre>"},{"location":"models/#yatta.models.CharacterAscensionItem","title":"CharacterAscensionItem  <code>pydantic-model</code>","text":"<p>Represent an item and amount required for character ascension.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The ID of the required item.</p> </li> <li> <code>amount</code>               (<code>int</code>)           \u2013            <p>The amount of the item required.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>amount</code>                 (<code>int</code>)             </li> </ul>"},{"location":"models/#yatta.models.CharacterAscensionItem.amount","title":"amount  <code>pydantic-field</code>","text":"<pre><code>amount: int\n</code></pre>"},{"location":"models/#yatta.models.CharacterAscensionItem.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.CharacterCostItem","title":"CharacterCostItem  <code>pydantic-model</code>","text":"<p>Represent an item and amount required for character level upgrades.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The ID of the required item.</p> </li> <li> <code>amount</code>               (<code>int</code>)           \u2013            <p>The amount of the item required.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>amount</code>                 (<code>int</code>)             </li> </ul>"},{"location":"models/#yatta.models.CharacterCostItem.amount","title":"amount  <code>pydantic-field</code>","text":"<pre><code>amount: int\n</code></pre>"},{"location":"models/#yatta.models.CharacterCostItem.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetail","title":"CharacterDetail  <code>pydantic-model</code>","text":"<p>Represent detailed information about a character.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The unique identifier for the character.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the character.</p> </li> <li> <code>beta</code>               (<code>bool</code>)           \u2013            <p>Whether the character is currently in beta.</p> </li> <li> <code>rarity</code>               (<code>int</code>)           \u2013            <p>The rarity (star rating) of the character.</p> </li> <li> <code>types</code>               (<code>CharacterDetailTypes</code>)           \u2013            <p>The Path and Combat Type details of the character.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the character's standard avatar icon.</p> </li> <li> <code>release</code>               (<code>int</code>)           \u2013            <p>Timestamp of the character's release (may be 0 if unreleased or unknown).</p> </li> <li> <code>route</code>               (<code>str</code>)           \u2013            <p>The API route for this character.</p> </li> <li> <code>info</code>               (<code>CharacterInfo</code>)           \u2013            <p>Additional fetter information (description, faction, VAs).</p> </li> <li> <code>upgrades</code>               (<code>list[CharacterUpgrade]</code>)           \u2013            <p>A list of ascension details for each rank.</p> </li> <li> <code>traces</code>               (<code>CharacterTraces</code>)           \u2013            <p>Container for all skill and trace information.</p> </li> <li> <code>eidolons</code>               (<code>list[CharacterEidolon]</code>)           \u2013            <p>A list of the character's Eidolons.</p> </li> <li> <code>ascension</code>               (<code>list[CharacterAscensionItem]</code>)           \u2013            <p>A list of materials required for ascension across all ranks.</p> </li> <li> <code>script</code>               (<code>CharacterScript</code>)           \u2013            <p>Container for character stories and voice lines.</p> </li> <li> <code>release_at</code>               (<code>datetime | None</code>)           \u2013            <p>Datetime object representing the release timestamp (optional).</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>beta</code>                 (<code>bool</code>)             </li> <li> <code>rarity</code>                 (<code>int</code>)             </li> <li> <code>types</code>                 (<code>CharacterDetailTypes</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> <li> <code>release</code>                 (<code>int</code>)             </li> <li> <code>route</code>                 (<code>str</code>)             </li> <li> <code>info</code>                 (<code>CharacterInfo</code>)             </li> <li> <code>upgrades</code>                 (<code>list[CharacterUpgrade]</code>)             </li> <li> <code>traces</code>                 (<code>CharacterTraces</code>)             </li> <li> <code>eidolons</code>                 (<code>list[CharacterEidolon]</code>)             </li> <li> <code>ascension</code>                 (<code>list[CharacterAscensionItem]</code>)             </li> <li> <code>script</code>                 (<code>CharacterScript</code>)             </li> <li> <code>release_at</code>                 (<code>datetime | None</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> <li> <code>__convert_eidolons</code>                 \u2192                   <code>eidolons</code> </li> <li> <code>__convert_ascension</code>                 \u2192                   <code>ascension</code> </li> <li> <code>__convert_release_at</code>                 \u2192                   <code>release_at</code> </li> </ul>"},{"location":"models/#yatta.models.CharacterDetail.ascension","title":"ascension  <code>pydantic-field</code>","text":"<pre><code>ascension: list[CharacterAscensionItem]\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetail.beta","title":"beta  <code>pydantic-field</code>","text":"<pre><code>beta: bool = False\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetail.eidolons","title":"eidolons  <code>pydantic-field</code>","text":"<pre><code>eidolons: list[CharacterEidolon]\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetail.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetail.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetail.info","title":"info  <code>pydantic-field</code>","text":"<pre><code>info: CharacterInfo\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetail.large_icon","title":"large_icon  <code>property</code>","text":"<pre><code>large_icon: str\n</code></pre> <p>Return the URL to the large-sized avatar icon (full splash art).</p>"},{"location":"models/#yatta.models.CharacterDetail.medium_icon","title":"medium_icon  <code>property</code>","text":"<pre><code>medium_icon: str\n</code></pre> <p>Return the URL to the medium-sized avatar icon.</p>"},{"location":"models/#yatta.models.CharacterDetail.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetail.rarity","title":"rarity  <code>pydantic-field</code>","text":"<pre><code>rarity: int\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetail.release","title":"release  <code>pydantic-field</code>","text":"<pre><code>release: int\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetail.release_at","title":"release_at  <code>pydantic-field</code>","text":"<pre><code>release_at: datetime | None = None\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetail.round_icon","title":"round_icon  <code>property</code>","text":"<pre><code>round_icon: str\n</code></pre> <p>Return the URL to the round avatar icon.</p>"},{"location":"models/#yatta.models.CharacterDetail.route","title":"route  <code>pydantic-field</code>","text":"<pre><code>route: str\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetail.script","title":"script  <code>pydantic-field</code>","text":"<pre><code>script: CharacterScript\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetail.traces","title":"traces  <code>pydantic-field</code>","text":"<pre><code>traces: CharacterTraces\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetail.types","title":"types  <code>pydantic-field</code>","text":"<pre><code>types: CharacterDetailTypes\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetail.upgrades","title":"upgrades  <code>pydantic-field</code>","text":"<pre><code>upgrades: list[CharacterUpgrade]\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetailType","title":"CharacterDetailType  <code>pydantic-model</code>","text":"<p>Represent either the Path or Combat Type with its ID and name.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>The identifier string (e.g., \"Warrior\", \"Ice\").</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The display name (e.g., \"Destruction\", \"Ice\").</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> </ul>"},{"location":"models/#yatta.models.CharacterDetailType.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetailType.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetailTypes","title":"CharacterDetailTypes  <code>pydantic-model</code>","text":"<p>Contain the character's Path and Combat Type details.</p> <p>Attributes:</p> <ul> <li> <code>path_type</code>               (<code>CharacterDetailType</code>)           \u2013            <p>The character's Path details.</p> </li> <li> <code>combat_type</code>               (<code>CharacterDetailType</code>)           \u2013            <p>The character's Combat Type details.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>path_type</code>                 (<code>CharacterDetailType</code>)             </li> <li> <code>combat_type</code>                 (<code>CharacterDetailType</code>)             </li> </ul>"},{"location":"models/#yatta.models.CharacterDetailTypes.combat_type","title":"combat_type  <code>pydantic-field</code>","text":"<pre><code>combat_type: CharacterDetailType\n</code></pre>"},{"location":"models/#yatta.models.CharacterDetailTypes.path_type","title":"path_type  <code>pydantic-field</code>","text":"<pre><code>path_type: CharacterDetailType\n</code></pre>"},{"location":"models/#yatta.models.CharacterEidolon","title":"CharacterEidolon  <code>pydantic-model</code>","text":"<p>Represent a character Eidolon.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The unique identifier for the Eidolon.</p> </li> <li> <code>rank</code>               (<code>int</code>)           \u2013            <p>The rank of the Eidolon (1-6).</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the Eidolon.</p> </li> <li> <code>params</code>               (<code>list[int | float] | None</code>)           \u2013            <p>Parameters used for placeholder replacement in the description.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The formatted description of the Eidolon's effect.</p> </li> <li> <code>skill_add_level_list</code>               (<code>list[SkillAdd]</code>)           \u2013            <p>List of skills whose levels are increased by this Eidolon.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the Eidolon's icon.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>rank</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>params</code>                 (<code>list[int | float] | None</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>skill_add_level_list</code>                 (<code>list[SkillAdd]</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__format_description</code>                 \u2192                   <code>description</code> </li> <li> <code>__convert_skill_add_level_list</code>                 \u2192                   <code>skill_add_level_list</code> </li> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> </ul>"},{"location":"models/#yatta.models.CharacterEidolon.description","title":"description  <code>pydantic-field</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"models/#yatta.models.CharacterEidolon.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.CharacterEidolon.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.CharacterEidolon.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.CharacterEidolon.params","title":"params  <code>pydantic-field</code>","text":"<pre><code>params: list[int | float] | None\n</code></pre>"},{"location":"models/#yatta.models.CharacterEidolon.rank","title":"rank  <code>pydantic-field</code>","text":"<pre><code>rank: int\n</code></pre>"},{"location":"models/#yatta.models.CharacterEidolon.skill_add_level_list","title":"skill_add_level_list  <code>pydantic-field</code>","text":"<pre><code>skill_add_level_list: list[SkillAdd]\n</code></pre> <p>List of skills that increase their level because of this eidolon</p>"},{"location":"models/#yatta.models.CharacterInfo","title":"CharacterInfo  <code>pydantic-model</code>","text":"<p>Represent additional information about a character (fetter info).</p> <p>Attributes:</p> <ul> <li> <code>faction</code>               (<code>str | None</code>)           \u2013            <p>The faction or affiliation of the character (optional).</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>A general description or profile of the character.</p> </li> <li> <code>voice_actors</code>               (<code>list[VoiceActor]</code>)           \u2013            <p>A list of voice actors for different languages.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>faction</code>                 (<code>str | None</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>voice_actors</code>                 (<code>list[VoiceActor]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_voice_actors</code>                 \u2192                   <code>voice_actors</code> </li> </ul>"},{"location":"models/#yatta.models.CharacterInfo.description","title":"description  <code>pydantic-field</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"models/#yatta.models.CharacterInfo.faction","title":"faction  <code>pydantic-field</code>","text":"<pre><code>faction: str | None\n</code></pre>"},{"location":"models/#yatta.models.CharacterInfo.voice_actors","title":"voice_actors  <code>pydantic-field</code>","text":"<pre><code>voice_actors: list[VoiceActor]\n</code></pre>"},{"location":"models/#yatta.models.CharacterScript","title":"CharacterScript  <code>pydantic-model</code>","text":"<p>Contain character stories and voice lines.</p> <p>Attributes:</p> <ul> <li> <code>stories</code>               (<code>list[CharacterStory]</code>)           \u2013            <p>A list of character story sections.</p> </li> <li> <code>voices</code>               (<code>list[CharacterVoice]</code>)           \u2013            <p>A list of character voice lines.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>stories</code>                 (<code>list[CharacterStory]</code>)             </li> <li> <code>voices</code>                 (<code>list[CharacterVoice]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_stories</code>                 \u2192                   <code>stories</code> </li> <li> <code>__convert_voices</code>                 \u2192                   <code>voices</code> </li> </ul>"},{"location":"models/#yatta.models.CharacterScript.stories","title":"stories  <code>pydantic-field</code>","text":"<pre><code>stories: list[CharacterStory]\n</code></pre>"},{"location":"models/#yatta.models.CharacterScript.voices","title":"voices  <code>pydantic-field</code>","text":"<pre><code>voices: list[CharacterVoice]\n</code></pre>"},{"location":"models/#yatta.models.CharacterStory","title":"CharacterStory  <code>pydantic-model</code>","text":"<p>Represent a piece of character story/lore.</p> <p>Attributes:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title of the story section.</p> </li> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The content of the story section.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>title</code>                 (<code>str</code>)             </li> <li> <code>text</code>                 (<code>str</code>)             </li> </ul>"},{"location":"models/#yatta.models.CharacterStory.text","title":"text  <code>pydantic-field</code>","text":"<pre><code>text: str\n</code></pre>"},{"location":"models/#yatta.models.CharacterStory.title","title":"title  <code>pydantic-field</code>","text":"<pre><code>title: str\n</code></pre>"},{"location":"models/#yatta.models.CharacterTraces","title":"CharacterTraces  <code>pydantic-model</code>","text":"<p>Contain all character traces (skills and passive abilities).</p> <p>Attributes:</p> <ul> <li> <code>main_skills</code>               (<code>list[BaseSkill]</code>)           \u2013            <p>List of main skills (Basic ATK, Skill, Ultimate, Talent).</p> </li> <li> <code>sub_skills</code>               (<code>list[BaseSkill]</code>)           \u2013            <p>List of passive trace nodes (stat bonuses, extra abilities).</p> </li> <li> <code>tree_skills</code>               (<code>list[SkillTree]</code>)           \u2013            <p>List representing the structure and connections of the skill trees.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>main_skills</code>                 (<code>list[BaseSkill]</code>)             </li> <li> <code>sub_skills</code>                 (<code>list[BaseSkill]</code>)             </li> <li> <code>tree_skills</code>                 (<code>list[SkillTree]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_main_skills</code>                 \u2192                   <code>main_skills</code> </li> <li> <code>__convert_sub_skills</code>                 \u2192                   <code>sub_skills</code> </li> <li> <code>__convert_tree_skills</code>                 \u2192                   <code>tree_skills</code> </li> </ul>"},{"location":"models/#yatta.models.CharacterTraces.main_skills","title":"main_skills  <code>pydantic-field</code>","text":"<pre><code>main_skills: list[BaseSkill]\n</code></pre>"},{"location":"models/#yatta.models.CharacterTraces.sub_skills","title":"sub_skills  <code>pydantic-field</code>","text":"<pre><code>sub_skills: list[BaseSkill]\n</code></pre>"},{"location":"models/#yatta.models.CharacterTraces.tree_skills","title":"tree_skills  <code>pydantic-field</code>","text":"<pre><code>tree_skills: list[SkillTree]\n</code></pre>"},{"location":"models/#yatta.models.CharacterType","title":"CharacterType  <code>pydantic-model</code>","text":"<p>Contain the character's Path and Combat Type enums.</p> <p>Attributes:</p> <ul> <li> <code>path_type</code>               (<code>PathType</code>)           \u2013            <p>The character's Path enum.</p> </li> <li> <code>combat_type</code>               (<code>CombatType</code>)           \u2013            <p>The character's Combat Type enum.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>path_type</code>                 (<code>PathType</code>)             </li> <li> <code>combat_type</code>                 (<code>CombatType</code>)             </li> </ul>"},{"location":"models/#yatta.models.CharacterType.combat_type","title":"combat_type  <code>pydantic-field</code>","text":"<pre><code>combat_type: CombatType\n</code></pre>"},{"location":"models/#yatta.models.CharacterType.path_type","title":"path_type  <code>pydantic-field</code>","text":"<pre><code>path_type: PathType\n</code></pre>"},{"location":"models/#yatta.models.CharacterUpgrade","title":"CharacterUpgrade  <code>pydantic-model</code>","text":"<p>Represent the details for a specific character ascension rank.</p> <p>Attributes:</p> <ul> <li> <code>level</code>               (<code>int</code>)           \u2013            <p>The ascension rank (0-indexed).</p> </li> <li> <code>cost_items</code>               (<code>list[CharacterCostItem]</code>)           \u2013            <p>A list of items required for this ascension.</p> </li> <li> <code>max_level</code>               (<code>int</code>)           \u2013            <p>The maximum character level achievable after this ascension.</p> </li> <li> <code>required_player_level</code>               (<code>int</code>)           \u2013            <p>The Trailblaze Level required for this ascension.</p> </li> <li> <code>required_world_level</code>               (<code>int</code>)           \u2013            <p>The Equilibrium Level required for this ascension.</p> </li> <li> <code>skill_base</code>               (<code>dict[str, int | float]</code>)           \u2013            <p>Base stats of the character at this ascension rank (level 1 of the rank).</p> </li> <li> <code>skill_add</code>               (<code>dict[str, int | float]</code>)           \u2013            <p>Additional stats gained per level within this ascension rank.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>level</code>                 (<code>int</code>)             </li> <li> <code>cost_items</code>                 (<code>list[CharacterCostItem]</code>)             </li> <li> <code>max_level</code>                 (<code>int</code>)             </li> <li> <code>required_player_level</code>                 (<code>int</code>)             </li> <li> <code>required_world_level</code>                 (<code>int</code>)             </li> <li> <code>skill_base</code>                 (<code>dict[str, int | float]</code>)             </li> <li> <code>skill_add</code>                 (<code>dict[str, int | float]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_cost_items</code>                 \u2192                   <code>cost_items</code> </li> <li> <code>__convert_required_player_level</code>                 \u2192                   <code>required_player_level</code> </li> <li> <code>__convert_required_world_level</code>                 \u2192                   <code>required_world_level</code> </li> </ul>"},{"location":"models/#yatta.models.CharacterUpgrade.cost_items","title":"cost_items  <code>pydantic-field</code>","text":"<pre><code>cost_items: list[CharacterCostItem]\n</code></pre>"},{"location":"models/#yatta.models.CharacterUpgrade.level","title":"level  <code>pydantic-field</code>","text":"<pre><code>level: int\n</code></pre>"},{"location":"models/#yatta.models.CharacterUpgrade.max_level","title":"max_level  <code>pydantic-field</code>","text":"<pre><code>max_level: int\n</code></pre>"},{"location":"models/#yatta.models.CharacterUpgrade.required_player_level","title":"required_player_level  <code>pydantic-field</code>","text":"<pre><code>required_player_level: int\n</code></pre>"},{"location":"models/#yatta.models.CharacterUpgrade.required_world_level","title":"required_world_level  <code>pydantic-field</code>","text":"<pre><code>required_world_level: int\n</code></pre>"},{"location":"models/#yatta.models.CharacterUpgrade.skill_add","title":"skill_add  <code>pydantic-field</code>","text":"<pre><code>skill_add: dict[str, int | float]\n</code></pre>"},{"location":"models/#yatta.models.CharacterUpgrade.skill_base","title":"skill_base  <code>pydantic-field</code>","text":"<pre><code>skill_base: dict[str, int | float]\n</code></pre>"},{"location":"models/#yatta.models.CharacterVoice","title":"CharacterVoice  <code>pydantic-model</code>","text":"<p>Represent a character voice line.</p> <p>Attributes:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>The title or trigger condition of the voice line.</p> </li> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The transcribed text of the voice line.</p> </li> <li> <code>audio</code>               (<code>int | None</code>)           \u2013            <p>The ID or reference to the audio file (optional).</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>title</code>                 (<code>str</code>)             </li> <li> <code>text</code>                 (<code>str</code>)             </li> <li> <code>audio</code>                 (<code>int | None</code>)             </li> </ul>"},{"location":"models/#yatta.models.CharacterVoice.audio","title":"audio  <code>pydantic-field</code>","text":"<pre><code>audio: int | None\n</code></pre>"},{"location":"models/#yatta.models.CharacterVoice.text","title":"text  <code>pydantic-field</code>","text":"<pre><code>text: str\n</code></pre>"},{"location":"models/#yatta.models.CharacterVoice.title","title":"title  <code>pydantic-field</code>","text":"<pre><code>title: str\n</code></pre>"},{"location":"models/#yatta.models.Contact","title":"Contact  <code>pydantic-model</code>","text":"<p>Represent a message contact.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the contact.</p> </li> <li> <code>signature</code>               (<code>str | None</code>)           \u2013            <p>The signature of the contact (optional).</p> </li> <li> <code>type</code>               (<code>int</code>)           \u2013            <p>The type identifier of the contact.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the contact's avatar icon.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>signature</code>                 (<code>str | None</code>)             </li> <li> <code>type</code>                 (<code>int</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> </ul>"},{"location":"models/#yatta.models.Contact.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.Contact.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.Contact.signature","title":"signature  <code>pydantic-field</code>","text":"<pre><code>signature: str | None = None\n</code></pre>"},{"location":"models/#yatta.models.Contact.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: int\n</code></pre>"},{"location":"models/#yatta.models.ExtraEffect","title":"ExtraEffect  <code>pydantic-model</code>","text":"<p>Represent an extra effect associated with a skill.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the extra effect.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The description of the extra effect.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the icon for the extra effect.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> </ul>"},{"location":"models/#yatta.models.ExtraEffect.description","title":"description  <code>pydantic-field</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"models/#yatta.models.ExtraEffect.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.ExtraEffect.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.Item","title":"Item  <code>pydantic-model</code>","text":"<p>Represent basic information about an item.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The unique identifier for the item.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the item.</p> </li> <li> <code>beta</code>               (<code>bool</code>)           \u2013            <p>Whether the item is currently in beta.</p> </li> <li> <code>rarity</code>               (<code>int</code>)           \u2013            <p>The rarity (star rating) of the item.</p> </li> <li> <code>type</code>               (<code>int</code>)           \u2013            <p>The numeric ID representing the item type.</p> </li> <li> <code>tags</code>               (<code>list[str]</code>)           \u2013            <p>A list of tags associated with the item.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the item's icon.</p> </li> <li> <code>route</code>               (<code>str</code>)           \u2013            <p>The API route for this item.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>beta</code>                 (<code>bool</code>)             </li> <li> <code>rarity</code>                 (<code>int</code>)             </li> <li> <code>type</code>                 (<code>int</code>)             </li> <li> <code>tags</code>                 (<code>list[str]</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> <li> <code>route</code>                 (<code>str</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__coerce_tags</code>                 \u2192                   <code>tags</code> </li> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> </ul>"},{"location":"models/#yatta.models.Item.beta","title":"beta  <code>pydantic-field</code>","text":"<pre><code>beta: bool = False\n</code></pre>"},{"location":"models/#yatta.models.Item.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.Item.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.Item.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.Item.rarity","title":"rarity  <code>pydantic-field</code>","text":"<pre><code>rarity: int\n</code></pre>"},{"location":"models/#yatta.models.Item.route","title":"route  <code>pydantic-field</code>","text":"<pre><code>route: str\n</code></pre>"},{"location":"models/#yatta.models.Item.tags","title":"tags  <code>pydantic-field</code>","text":"<pre><code>tags: list[str]\n</code></pre>"},{"location":"models/#yatta.models.Item.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: int\n</code></pre>"},{"location":"models/#yatta.models.ItemDetail","title":"ItemDetail  <code>pydantic-model</code>","text":"<p>Represent detailed information about an item.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The unique identifier for the item.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the item.</p> </li> <li> <code>beta</code>               (<code>bool</code>)           \u2013            <p>Whether the item is currently in beta.</p> </li> <li> <code>rarity</code>               (<code>int</code>)           \u2013            <p>The rarity (star rating) of the item.</p> </li> <li> <code>tags</code>               (<code>list[str]</code>)           \u2013            <p>A list of tags associated with the item.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the item's icon.</p> </li> <li> <code>route</code>               (<code>str</code>)           \u2013            <p>The API route for this item.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The functional description of the item.</p> </li> <li> <code>story</code>               (<code>str | None</code>)           \u2013            <p>The lore or background story of the item (optional).</p> </li> <li> <code>sources</code>               (<code>list[ItemSource]</code>)           \u2013            <p>A list of sources where this item can be obtained.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>beta</code>                 (<code>bool</code>)             </li> <li> <code>rarity</code>                 (<code>int</code>)             </li> <li> <code>tags</code>                 (<code>list[str]</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> <li> <code>route</code>                 (<code>str</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>story</code>                 (<code>str | None</code>)             </li> <li> <code>sources</code>                 (<code>list[ItemSource]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__coerce_tags</code>                 \u2192                   <code>tags</code> </li> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> <li> <code>__convert_sources</code>                 \u2192                   <code>sources</code> </li> </ul>"},{"location":"models/#yatta.models.ItemDetail.beta","title":"beta  <code>pydantic-field</code>","text":"<pre><code>beta: bool = False\n</code></pre>"},{"location":"models/#yatta.models.ItemDetail.description","title":"description  <code>pydantic-field</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"models/#yatta.models.ItemDetail.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.ItemDetail.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.ItemDetail.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.ItemDetail.rarity","title":"rarity  <code>pydantic-field</code>","text":"<pre><code>rarity: int\n</code></pre>"},{"location":"models/#yatta.models.ItemDetail.route","title":"route  <code>pydantic-field</code>","text":"<pre><code>route: str\n</code></pre>"},{"location":"models/#yatta.models.ItemDetail.sources","title":"sources  <code>pydantic-field</code>","text":"<pre><code>sources: list[ItemSource]\n</code></pre>"},{"location":"models/#yatta.models.ItemDetail.story","title":"story  <code>pydantic-field</code>","text":"<pre><code>story: str | None\n</code></pre>"},{"location":"models/#yatta.models.ItemDetail.tags","title":"tags  <code>pydantic-field</code>","text":"<pre><code>tags: list[str]\n</code></pre>"},{"location":"models/#yatta.models.ItemSource","title":"ItemSource  <code>pydantic-model</code>","text":"<p>Represent a source from which an item can be obtained.</p> <p>Attributes:</p> <ul> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>A description of the source (e.g., \"Omni-Synthesizer\").</p> </li> <li> <code>recipes</code>               (<code>list[Recipe]</code>)           \u2013            <p>A list of recipes associated with this source.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>recipes</code>                 (<code>list[Recipe]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_recipes</code>                 \u2192                   <code>recipes</code> </li> </ul>"},{"location":"models/#yatta.models.ItemSource.description","title":"description  <code>pydantic-field</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"models/#yatta.models.ItemSource.recipes","title":"recipes  <code>pydantic-field</code>","text":"<pre><code>recipes: list[Recipe]\n</code></pre>"},{"location":"models/#yatta.models.ItemType","title":"ItemType  <code>pydantic-model</code>","text":"<p>Represent the type of an item.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The numeric ID of the item type.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The display name of the item type.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> </ul>"},{"location":"models/#yatta.models.ItemType.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.ItemType.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.LightCone","title":"LightCone  <code>pydantic-model</code>","text":"<p>Represent basic information about a light cone.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The unique identifier for the light cone.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the light cone.</p> </li> <li> <code>beta</code>               (<code>bool</code>)           \u2013            <p>Whether the light cone is currently in beta.</p> </li> <li> <code>rarity</code>               (<code>int</code>)           \u2013            <p>The rarity (star rating) of the light cone.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the light cone's standard icon.</p> </li> <li> <code>type</code>               (<code>str</code>)           \u2013            <p>The identifier string for the path type (e.g., \"Warrior\").</p> </li> <li> <code>is_sellable</code>               (<code>bool</code>)           \u2013            <p>Whether the light cone can be sold.</p> </li> <li> <code>route</code>               (<code>str</code>)           \u2013            <p>The API route for this light cone.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>beta</code>                 (<code>bool</code>)             </li> <li> <code>rarity</code>                 (<code>int</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>str</code>)             </li> <li> <code>is_sellable</code>                 (<code>bool</code>)             </li> <li> <code>route</code>                 (<code>str</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> <li> <code>__convert_type</code>                 \u2192                   <code>type</code> </li> </ul>"},{"location":"models/#yatta.models.LightCone.beta","title":"beta  <code>pydantic-field</code>","text":"<pre><code>beta: bool = False\n</code></pre>"},{"location":"models/#yatta.models.LightCone.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.LightCone.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.LightCone.is_sellable","title":"is_sellable  <code>pydantic-field</code>","text":"<pre><code>is_sellable: bool\n</code></pre>"},{"location":"models/#yatta.models.LightCone.large_icon","title":"large_icon  <code>property</code>","text":"<pre><code>large_icon: str\n</code></pre> <p>Return the URL to the large-sized icon.</p>"},{"location":"models/#yatta.models.LightCone.medium_icon","title":"medium_icon  <code>property</code>","text":"<pre><code>medium_icon: str\n</code></pre> <p>Return the URL to the medium-sized icon.</p>"},{"location":"models/#yatta.models.LightCone.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.LightCone.rarity","title":"rarity  <code>pydantic-field</code>","text":"<pre><code>rarity: int\n</code></pre>"},{"location":"models/#yatta.models.LightCone.route","title":"route  <code>pydantic-field</code>","text":"<pre><code>route: str\n</code></pre>"},{"location":"models/#yatta.models.LightCone.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: str\n</code></pre>"},{"location":"models/#yatta.models.LightConeAscensionMaterial","title":"LightConeAscensionMaterial  <code>pydantic-model</code>","text":"<p>Represent a material required for light cone ascension.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The ID of the ascension material item.</p> </li> <li> <code>rarity</code>               (<code>int</code>)           \u2013            <p>The rarity of the ascension material item.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>rarity</code>                 (<code>int</code>)             </li> </ul>"},{"location":"models/#yatta.models.LightConeAscensionMaterial.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.LightConeAscensionMaterial.rarity","title":"rarity  <code>pydantic-field</code>","text":"<pre><code>rarity: int\n</code></pre>"},{"location":"models/#yatta.models.LightConeCostItem","title":"LightConeCostItem  <code>pydantic-model</code>","text":"<p>Represent an item and its amount required for upgrading a light cone.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The ID of the required item.</p> </li> <li> <code>amount</code>               (<code>int</code>)           \u2013            <p>The amount of the item required.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>amount</code>                 (<code>int</code>)             </li> </ul>"},{"location":"models/#yatta.models.LightConeCostItem.amount","title":"amount  <code>pydantic-field</code>","text":"<pre><code>amount: int\n</code></pre>"},{"location":"models/#yatta.models.LightConeCostItem.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.LightConeDetail","title":"LightConeDetail  <code>pydantic-model</code>","text":"<p>Represent detailed information about a light cone.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The unique identifier for the light cone.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the light cone.</p> </li> <li> <code>beta</code>               (<code>bool</code>)           \u2013            <p>Whether the light cone is currently in beta.</p> </li> <li> <code>rarity</code>               (<code>int</code>)           \u2013            <p>The rarity (star rating) of the light cone.</p> </li> <li> <code>type</code>               (<code>LightConePathType</code>)           \u2013            <p>The path type of the light cone.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the light cone's standard icon.</p> </li> <li> <code>is_sellable</code>               (<code>bool</code>)           \u2013            <p>Whether the light cone can be sold.</p> </li> <li> <code>route</code>               (<code>str</code>)           \u2013            <p>The API route for this light cone.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The lore or background description of the light cone.</p> </li> <li> <code>upgrades</code>               (<code>list[LightConeUpgrade]</code>)           \u2013            <p>A list of ascension details for each rank.</p> </li> <li> <code>skill</code>               (<code>LightConeSkill</code>)           \u2013            <p>The skill details of the light cone.</p> </li> <li> <code>ascension_materials</code>               (<code>list[LightConeAscensionMaterial]</code>)           \u2013            <p>A list of materials required for ascension across all ranks.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>beta</code>                 (<code>bool</code>)             </li> <li> <code>rarity</code>                 (<code>int</code>)             </li> <li> <code>type</code>                 (<code>LightConePathType</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> <li> <code>is_sellable</code>                 (<code>bool</code>)             </li> <li> <code>route</code>                 (<code>str</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>upgrades</code>                 (<code>list[LightConeUpgrade]</code>)             </li> <li> <code>skill</code>                 (<code>LightConeSkill</code>)             </li> <li> <code>ascension_materials</code>                 (<code>list[LightConeAscensionMaterial]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_type</code>                 \u2192                   <code>type</code> </li> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> <li> <code>__convert_upgrades</code>                 \u2192                   <code>upgrades</code> </li> <li> <code>__convert_ascension_materials</code>                 \u2192                   <code>ascension_materials</code> </li> </ul>"},{"location":"models/#yatta.models.LightConeDetail.ascension_materials","title":"ascension_materials  <code>pydantic-field</code>","text":"<pre><code>ascension_materials: list[LightConeAscensionMaterial]\n</code></pre>"},{"location":"models/#yatta.models.LightConeDetail.beta","title":"beta  <code>pydantic-field</code>","text":"<pre><code>beta: bool = False\n</code></pre>"},{"location":"models/#yatta.models.LightConeDetail.description","title":"description  <code>pydantic-field</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"models/#yatta.models.LightConeDetail.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.LightConeDetail.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.LightConeDetail.is_sellable","title":"is_sellable  <code>pydantic-field</code>","text":"<pre><code>is_sellable: bool\n</code></pre>"},{"location":"models/#yatta.models.LightConeDetail.large_icon","title":"large_icon  <code>property</code>","text":"<pre><code>large_icon: str\n</code></pre> <p>Return the URL to the large-sized icon.</p>"},{"location":"models/#yatta.models.LightConeDetail.medium_icon","title":"medium_icon  <code>property</code>","text":"<pre><code>medium_icon: str\n</code></pre> <p>Return the URL to the medium-sized icon.</p>"},{"location":"models/#yatta.models.LightConeDetail.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.LightConeDetail.rarity","title":"rarity  <code>pydantic-field</code>","text":"<pre><code>rarity: int\n</code></pre>"},{"location":"models/#yatta.models.LightConeDetail.route","title":"route  <code>pydantic-field</code>","text":"<pre><code>route: str\n</code></pre>"},{"location":"models/#yatta.models.LightConeDetail.skill","title":"skill  <code>pydantic-field</code>","text":"<pre><code>skill: LightConeSkill\n</code></pre>"},{"location":"models/#yatta.models.LightConeDetail.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: LightConePathType\n</code></pre>"},{"location":"models/#yatta.models.LightConeDetail.upgrades","title":"upgrades  <code>pydantic-field</code>","text":"<pre><code>upgrades: list[LightConeUpgrade]\n</code></pre>"},{"location":"models/#yatta.models.LightConePathType","title":"LightConePathType  <code>pydantic-model</code>","text":"<p>Represent the path type of a light cone.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>The identifier string for the path type (e.g., \"Warrior\").</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The display name of the path type (e.g., \"Destruction\").</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> </ul>"},{"location":"models/#yatta.models.LightConePathType.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"models/#yatta.models.LightConePathType.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.LightConeSkill","title":"LightConeSkill  <code>pydantic-model</code>","text":"<p>Represent the skill of a light cone.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the light cone skill.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The description of the light cone skill.</p> </li> <li> <code>params</code>               (<code>dict[str, list[int | float]]</code>)           \u2013            <p>Parameters associated with the skill's effects, often scaling with superimposition.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>params</code>                 (<code>dict[str, list[int | float]]</code>)             </li> </ul>"},{"location":"models/#yatta.models.LightConeSkill.description","title":"description  <code>pydantic-field</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"models/#yatta.models.LightConeSkill.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.LightConeSkill.params","title":"params  <code>pydantic-field</code>","text":"<pre><code>params: dict[str, list[int | float]]\n</code></pre>"},{"location":"models/#yatta.models.LightConeUpgrade","title":"LightConeUpgrade  <code>pydantic-model</code>","text":"<p>Represent the details for a specific ascension level of a light cone.</p> <p>Attributes:</p> <ul> <li> <code>level</code>               (<code>int</code>)           \u2013            <p>The ascension level (0-indexed).</p> </li> <li> <code>cost_items</code>               (<code>list[LightConeCostItem]</code>)           \u2013            <p>A list of items required for this ascension.</p> </li> <li> <code>max_level</code>               (<code>int</code>)           \u2013            <p>The maximum character level achievable after this ascension.</p> </li> <li> <code>required_player_level</code>               (<code>int</code>)           \u2013            <p>The Trailblaze Level required for this ascension.</p> </li> <li> <code>required_world_level</code>               (<code>int</code>)           \u2013            <p>The Equilibrium Level required for this ascension.</p> </li> <li> <code>skill_base</code>               (<code>dict[str, int | float]</code>)           \u2013            <p>Base stats provided by the light cone at this ascension.</p> </li> <li> <code>skill_add</code>               (<code>dict[str, int | float]</code>)           \u2013            <p>Additional stats gained per level within this ascension rank.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>level</code>                 (<code>int</code>)             </li> <li> <code>cost_items</code>                 (<code>list[LightConeCostItem]</code>)             </li> <li> <code>max_level</code>                 (<code>int</code>)             </li> <li> <code>required_player_level</code>                 (<code>int</code>)             </li> <li> <code>required_world_level</code>                 (<code>int</code>)             </li> <li> <code>skill_base</code>                 (<code>dict[str, int | float]</code>)             </li> <li> <code>skill_add</code>                 (<code>dict[str, int | float]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_required_player_level</code>                 \u2192                   <code>required_player_level</code> </li> <li> <code>__convert_world_level_require</code>                 \u2192                   <code>required_world_level</code> </li> <li> <code>__convert_cost_items</code>                 \u2192                   <code>cost_items</code> </li> </ul>"},{"location":"models/#yatta.models.LightConeUpgrade.cost_items","title":"cost_items  <code>pydantic-field</code>","text":"<pre><code>cost_items: list[LightConeCostItem]\n</code></pre>"},{"location":"models/#yatta.models.LightConeUpgrade.level","title":"level  <code>pydantic-field</code>","text":"<pre><code>level: int\n</code></pre>"},{"location":"models/#yatta.models.LightConeUpgrade.max_level","title":"max_level  <code>pydantic-field</code>","text":"<pre><code>max_level: int\n</code></pre>"},{"location":"models/#yatta.models.LightConeUpgrade.required_player_level","title":"required_player_level  <code>pydantic-field</code>","text":"<pre><code>required_player_level: int\n</code></pre>"},{"location":"models/#yatta.models.LightConeUpgrade.required_world_level","title":"required_world_level  <code>pydantic-field</code>","text":"<pre><code>required_world_level: int\n</code></pre>"},{"location":"models/#yatta.models.LightConeUpgrade.skill_add","title":"skill_add  <code>pydantic-field</code>","text":"<pre><code>skill_add: dict[str, int | float]\n</code></pre>"},{"location":"models/#yatta.models.LightConeUpgrade.skill_base","title":"skill_base  <code>pydantic-field</code>","text":"<pre><code>skill_base: dict[str, int | float]\n</code></pre>"},{"location":"models/#yatta.models.Message","title":"Message  <code>pydantic-model</code>","text":"<p>Represent a message thread or conversation.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The unique identifier for the message thread.</p> </li> <li> <code>contact</code>               (<code>Contact</code>)           \u2013            <p>The contact associated with this message thread.</p> </li> <li> <code>section_count</code>               (<code>int</code>)           \u2013            <p>The number of sections or messages in the thread.</p> </li> <li> <code>route</code>               (<code>str | None</code>)           \u2013            <p>The API route for this message thread (optional).</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>contact</code>                 (<code>Contact</code>)             </li> <li> <code>section_count</code>                 (<code>int</code>)             </li> <li> <code>route</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"models/#yatta.models.Message.contact","title":"contact  <code>pydantic-field</code>","text":"<pre><code>contact: Contact\n</code></pre>"},{"location":"models/#yatta.models.Message.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.Message.route","title":"route  <code>pydantic-field</code>","text":"<pre><code>route: str | None = None\n</code></pre>"},{"location":"models/#yatta.models.Message.section_count","title":"section_count  <code>pydantic-field</code>","text":"<pre><code>section_count: int\n</code></pre>"},{"location":"models/#yatta.models.Recipe","title":"Recipe  <code>pydantic-model</code>","text":"<p>Represent a recipe to craft or obtain an item.</p> <p>Attributes:</p> <ul> <li> <code>coin_cost</code>               (<code>int</code>)           \u2013            <p>The amount of credits required.</p> </li> <li> <code>required_world_level</code>               (<code>int</code>)           \u2013            <p>The Equilibrium Level required to use this recipe.</p> </li> <li> <code>materials</code>               (<code>list[RecipeMaterial]</code>)           \u2013            <p>A list of standard materials required.</p> </li> <li> <code>special_materials</code>               (<code>list[RecipeMaterial]</code>)           \u2013            <p>A list of special materials required (e.g., event currency).</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>coin_cost</code>                 (<code>int</code>)             </li> <li> <code>required_world_level</code>                 (<code>int</code>)             </li> <li> <code>materials</code>                 (<code>list[RecipeMaterial]</code>)             </li> <li> <code>special_materials</code>                 (<code>list[RecipeMaterial]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_coin_cost</code>                 \u2192                   <code>coin_cost</code> </li> <li> <code>__convert_required_world_level</code>                 \u2192                   <code>required_world_level</code> </li> <li> <code>__convert_materials</code>                 \u2192                   <code>materials</code> </li> <li> <code>__convert_special_materials</code>                 \u2192                   <code>special_materials</code> </li> </ul>"},{"location":"models/#yatta.models.Recipe.coin_cost","title":"coin_cost  <code>pydantic-field</code>","text":"<pre><code>coin_cost: int\n</code></pre>"},{"location":"models/#yatta.models.Recipe.materials","title":"materials  <code>pydantic-field</code>","text":"<pre><code>materials: list[RecipeMaterial]\n</code></pre>"},{"location":"models/#yatta.models.Recipe.required_world_level","title":"required_world_level  <code>pydantic-field</code>","text":"<pre><code>required_world_level: int\n</code></pre>"},{"location":"models/#yatta.models.Recipe.special_materials","title":"special_materials  <code>pydantic-field</code>","text":"<pre><code>special_materials: list[RecipeMaterial]\n</code></pre>"},{"location":"models/#yatta.models.RecipeMaterial","title":"RecipeMaterial  <code>pydantic-model</code>","text":"<p>Represent a material required for a recipe.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The ID of the material item.</p> </li> <li> <code>rarity</code>               (<code>int</code>)           \u2013            <p>The rarity of the material item.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the material item's icon.</p> </li> <li> <code>amount</code>               (<code>int</code>)           \u2013            <p>The amount of the material required.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>rarity</code>                 (<code>int</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> <li> <code>amount</code>                 (<code>int</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> </ul>"},{"location":"models/#yatta.models.RecipeMaterial.amount","title":"amount  <code>pydantic-field</code>","text":"<pre><code>amount: int\n</code></pre>"},{"location":"models/#yatta.models.RecipeMaterial.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.RecipeMaterial.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.RecipeMaterial.rarity","title":"rarity  <code>pydantic-field</code>","text":"<pre><code>rarity: int\n</code></pre>"},{"location":"models/#yatta.models.Relic","title":"Relic  <code>pydantic-model</code>","text":"<p>Represent a single relic piece.</p> <p>Attributes:</p> <ul> <li> <code>pos</code>               (<code>str</code>)           \u2013            <p>The position/slot of the relic (e.g., \"HEAD\", \"HAND\").</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the relic piece.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The description of the relic piece.</p> </li> <li> <code>story</code>               (<code>str</code>)           \u2013            <p>The lore or story associated with the relic piece.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the relic piece's icon.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>pos</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>story</code>                 (<code>str</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> </ul>"},{"location":"models/#yatta.models.Relic.description","title":"description  <code>pydantic-field</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"models/#yatta.models.Relic.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.Relic.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.Relic.pos","title":"pos  <code>pydantic-field</code>","text":"<pre><code>pos: str\n</code></pre>"},{"location":"models/#yatta.models.Relic.story","title":"story  <code>pydantic-field</code>","text":"<pre><code>story: str\n</code></pre>"},{"location":"models/#yatta.models.RelicSet","title":"RelicSet  <code>pydantic-model</code>","text":"<p>Represent basic information about a relic set.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The unique identifier for the relic set.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the relic set.</p> </li> <li> <code>beta</code>               (<code>bool</code>)           \u2013            <p>Whether the relic set is currently in beta.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the relic set's icon.</p> </li> <li> <code>rarity_list</code>               (<code>list[int]</code>)           \u2013            <p>A list of rarities this set is available in.</p> </li> <li> <code>is_planar_suit</code>               (<code>bool</code>)           \u2013            <p>Whether the set is a Planar Ornament set.</p> </li> <li> <code>route</code>               (<code>str</code>)           \u2013            <p>The API route for this relic set.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>beta</code>                 (<code>bool</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> <li> <code>rarity_list</code>                 (<code>list[int]</code>)             </li> <li> <code>is_planar_suit</code>                 (<code>bool</code>)             </li> <li> <code>route</code>                 (<code>str</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> </ul>"},{"location":"models/#yatta.models.RelicSet.beta","title":"beta  <code>pydantic-field</code>","text":"<pre><code>beta: bool = False\n</code></pre>"},{"location":"models/#yatta.models.RelicSet.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.RelicSet.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.RelicSet.is_planar_suit","title":"is_planar_suit  <code>pydantic-field</code>","text":"<pre><code>is_planar_suit: bool\n</code></pre>"},{"location":"models/#yatta.models.RelicSet.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.RelicSet.rarity_list","title":"rarity_list  <code>pydantic-field</code>","text":"<pre><code>rarity_list: list[int]\n</code></pre>"},{"location":"models/#yatta.models.RelicSet.route","title":"route  <code>pydantic-field</code>","text":"<pre><code>route: str\n</code></pre>"},{"location":"models/#yatta.models.RelicSetDetail","title":"RelicSetDetail  <code>pydantic-model</code>","text":"<p>Represent detailed information about a relic set.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The unique identifier for the relic set.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the relic set.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the relic set's icon.</p> </li> <li> <code>rarity_list</code>               (<code>list[int]</code>)           \u2013            <p>A list of rarities this set is available in.</p> </li> <li> <code>is_planar_suit</code>               (<code>bool</code>)           \u2013            <p>Whether the set is a Planar Ornament set.</p> </li> <li> <code>route</code>               (<code>str</code>)           \u2013            <p>The API route for this relic set.</p> </li> <li> <code>beta</code>               (<code>bool</code>)           \u2013            <p>Whether the relic set is currently in beta.</p> </li> <li> <code>set_effects</code>               (<code>SetEffects</code>)           \u2013            <p>The 2-piece and 4-piece effects of the set.</p> </li> <li> <code>relics</code>               (<code>list[Relic]</code>)           \u2013            <p>A list of individual relic pieces belonging to this set.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> <li> <code>rarity_list</code>                 (<code>list[int]</code>)             </li> <li> <code>is_planar_suit</code>                 (<code>bool</code>)             </li> <li> <code>route</code>                 (<code>str</code>)             </li> <li> <code>beta</code>                 (<code>bool</code>)             </li> <li> <code>set_effects</code>                 (<code>SetEffects</code>)             </li> <li> <code>relics</code>                 (<code>list[Relic]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> <li> <code>__convert_relics</code>                 \u2192                   <code>relics</code> </li> </ul>"},{"location":"models/#yatta.models.RelicSetDetail.beta","title":"beta  <code>pydantic-field</code>","text":"<pre><code>beta: bool = False\n</code></pre>"},{"location":"models/#yatta.models.RelicSetDetail.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.RelicSetDetail.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.RelicSetDetail.is_planar_suit","title":"is_planar_suit  <code>pydantic-field</code>","text":"<pre><code>is_planar_suit: bool\n</code></pre>"},{"location":"models/#yatta.models.RelicSetDetail.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.RelicSetDetail.rarity_list","title":"rarity_list  <code>pydantic-field</code>","text":"<pre><code>rarity_list: list[int]\n</code></pre>"},{"location":"models/#yatta.models.RelicSetDetail.relics","title":"relics  <code>pydantic-field</code>","text":"<pre><code>relics: list[Relic]\n</code></pre>"},{"location":"models/#yatta.models.RelicSetDetail.route","title":"route  <code>pydantic-field</code>","text":"<pre><code>route: str\n</code></pre>"},{"location":"models/#yatta.models.RelicSetDetail.set_effects","title":"set_effects  <code>pydantic-field</code>","text":"<pre><code>set_effects: SetEffects\n</code></pre>"},{"location":"models/#yatta.models.SetEffect","title":"SetEffect  <code>pydantic-model</code>","text":"<p>Represent a set effect for a relic set.</p> <p>Attributes:</p> <ul> <li> <code>params</code>               (<code>dict[str, list[int | float]] | None</code>)           \u2013            <p>Parameters used in the description placeholder replacement.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The formatted description of the set effect.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>params</code>                 (<code>dict[str, list[int | float]] | None</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__format_description</code>                 \u2192                   <code>description</code> </li> </ul>"},{"location":"models/#yatta.models.SetEffect.description","title":"description  <code>pydantic-field</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"models/#yatta.models.SetEffect.params","title":"params  <code>pydantic-field</code>","text":"<pre><code>params: dict[str, list[int | float]] | None\n</code></pre>"},{"location":"models/#yatta.models.SetEffects","title":"SetEffects  <code>pydantic-model</code>","text":"<p>Contain the 2-piece and 4-piece set effects.</p> <p>Attributes:</p> <ul> <li> <code>two_piece</code>               (<code>SetEffect</code>)           \u2013            <p>The effect activated when 2 pieces of the set are equipped.</p> </li> <li> <code>four_piece</code>               (<code>SetEffect | None</code>)           \u2013            <p>The effect activated when 4 pieces of the set are equipped (optional).</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>two_piece</code>                 (<code>SetEffect</code>)             </li> <li> <code>four_piece</code>                 (<code>SetEffect | None</code>)             </li> </ul>"},{"location":"models/#yatta.models.SetEffects.four_piece","title":"four_piece  <code>pydantic-field</code>","text":"<pre><code>four_piece: SetEffect | None = None\n</code></pre>"},{"location":"models/#yatta.models.SetEffects.two_piece","title":"two_piece  <code>pydantic-field</code>","text":"<pre><code>two_piece: SetEffect\n</code></pre>"},{"location":"models/#yatta.models.SkillAdd","title":"SkillAdd  <code>pydantic-model</code>","text":"<p>Represent a skill level increase granted by an Eidolon.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>ID of the skill whose level is increased.</p> </li> <li> <code>level</code>               (<code>int</code>)           \u2013            <p>The number of levels added to the skill.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>level</code>                 (<code>int</code>)             </li> </ul>"},{"location":"models/#yatta.models.SkillAdd.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre> <p>ID of the skill</p>"},{"location":"models/#yatta.models.SkillAdd.level","title":"level  <code>pydantic-field</code>","text":"<pre><code>level: int\n</code></pre> <p>Level added to the skill</p>"},{"location":"models/#yatta.models.SkillListSkill","title":"SkillListSkill  <code>pydantic-model</code>","text":"<p>Represent detailed information about a specific character skill (Basic ATK, Skill, Ultimate, Talent).</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The unique identifier for the skill.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the skill.</p> </li> <li> <code>tag</code>               (<code>str | None</code>)           \u2013            <p>A tag associated with the skill (e.g., \"Single Target\").</p> </li> <li> <code>type</code>               (<code>str</code>)           \u2013            <p>The type of the skill (e.g., \"Basic ATK\", \"Skill\", \"Ultimate\", \"Talent\").</p> </li> <li> <code>max_level</code>               (<code>int</code>)           \u2013            <p>The maximum level this skill can reach.</p> </li> <li> <code>skill_points</code>               (<code>list[SkillPoint]</code>)           \u2013            <p>Information about skill point generation/consumption.</p> </li> <li> <code>weakness_break</code>               (<code>list[WeaknessBreak]</code>)           \u2013            <p>Information about toughness damage dealt.</p> </li> <li> <code>description</code>               (<code>str | None</code>)           \u2013            <p>The detailed description of the skill (may contain placeholders).</p> </li> <li> <code>simplified_description</code>               (<code>str | None</code>)           \u2013            <p>A simplified description of the skill.</p> </li> <li> <code>traces</code>               (<code>list[int]</code>)           \u2013            <p>List of trace IDs related to this skill.</p> </li> <li> <code>eidolons</code>               (<code>list[int]</code>)           \u2013            <p>List of Eidolon IDs related to this skill.</p> </li> <li> <code>extra_effects</code>               (<code>list[ExtraEffect]</code>)           \u2013            <p>List of extra effects associated with this skill.</p> </li> <li> <code>attack_type</code>               (<code>str | None</code>)           \u2013            <p>The attack type (e.g., \"Normal\", \"AoE\").</p> </li> <li> <code>damage_type</code>               (<code>str | None</code>)           \u2013            <p>The damage type (e.g., \"Physical\", \"Fire\").</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the skill's icon.</p> </li> <li> <code>params</code>               (<code>dict[str, list[float]] | None</code>)           \u2013            <p>Parameters used for scaling and placeholder replacement in descriptions.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>tag</code>                 (<code>str | None</code>)             </li> <li> <code>type</code>                 (<code>str</code>)             </li> <li> <code>max_level</code>                 (<code>int</code>)             </li> <li> <code>skill_points</code>                 (<code>list[SkillPoint]</code>)             </li> <li> <code>weakness_break</code>                 (<code>list[WeaknessBreak]</code>)             </li> <li> <code>description</code>                 (<code>str | None</code>)             </li> <li> <code>simplified_description</code>                 (<code>str | None</code>)             </li> <li> <code>traces</code>                 (<code>list[int]</code>)             </li> <li> <code>eidolons</code>                 (<code>list[int]</code>)             </li> <li> <code>extra_effects</code>                 (<code>list[ExtraEffect]</code>)             </li> <li> <code>attack_type</code>                 (<code>str | None</code>)             </li> <li> <code>damage_type</code>                 (<code>str | None</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> <li> <code>params</code>                 (<code>dict[str, list[float]] | None</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_type</code>                 \u2192                   <code>type</code> </li> <li> <code>__convert_skill_points</code>                 \u2192                   <code>skill_points</code> </li> <li> <code>__convert_weakness_break</code>                 \u2192                   <code>weakness_break</code> </li> <li> <code>__format_simplified_description</code>                 \u2192                   <code>simplified_description</code> </li> <li> <code>__convert_traces</code>                 \u2192                   <code>traces</code> </li> <li> <code>__convert_eidolons</code>                 \u2192                   <code>eidolons</code> </li> <li> <code>__convert_extra_effects</code>                 \u2192                   <code>extra_effects</code> </li> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> </ul>"},{"location":"models/#yatta.models.SkillListSkill.attack_type","title":"attack_type  <code>pydantic-field</code>","text":"<pre><code>attack_type: str | None\n</code></pre>"},{"location":"models/#yatta.models.SkillListSkill.damage_type","title":"damage_type  <code>pydantic-field</code>","text":"<pre><code>damage_type: str | None\n</code></pre>"},{"location":"models/#yatta.models.SkillListSkill.description","title":"description  <code>pydantic-field</code>","text":"<pre><code>description: str | None\n</code></pre>"},{"location":"models/#yatta.models.SkillListSkill.eidolons","title":"eidolons  <code>pydantic-field</code>","text":"<pre><code>eidolons: list[int]\n</code></pre>"},{"location":"models/#yatta.models.SkillListSkill.extra_effects","title":"extra_effects  <code>pydantic-field</code>","text":"<pre><code>extra_effects: list[ExtraEffect]\n</code></pre>"},{"location":"models/#yatta.models.SkillListSkill.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.SkillListSkill.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.SkillListSkill.max_level","title":"max_level  <code>pydantic-field</code>","text":"<pre><code>max_level: int\n</code></pre>"},{"location":"models/#yatta.models.SkillListSkill.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.SkillListSkill.params","title":"params  <code>pydantic-field</code>","text":"<pre><code>params: dict[str, list[float]] | None\n</code></pre>"},{"location":"models/#yatta.models.SkillListSkill.simplified_description","title":"simplified_description  <code>pydantic-field</code>","text":"<pre><code>simplified_description: str | None\n</code></pre>"},{"location":"models/#yatta.models.SkillListSkill.skill_points","title":"skill_points  <code>pydantic-field</code>","text":"<pre><code>skill_points: list[SkillPoint]\n</code></pre>"},{"location":"models/#yatta.models.SkillListSkill.tag","title":"tag  <code>pydantic-field</code>","text":"<pre><code>tag: str | None\n</code></pre>"},{"location":"models/#yatta.models.SkillListSkill.traces","title":"traces  <code>pydantic-field</code>","text":"<pre><code>traces: list[int]\n</code></pre>"},{"location":"models/#yatta.models.SkillListSkill.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: str\n</code></pre>"},{"location":"models/#yatta.models.SkillListSkill.weakness_break","title":"weakness_break  <code>pydantic-field</code>","text":"<pre><code>weakness_break: list[WeaknessBreak]\n</code></pre>"},{"location":"models/#yatta.models.SkillPoint","title":"SkillPoint  <code>pydantic-model</code>","text":"<p>Represent skill point generation or consumption by a skill.</p> <p>Attributes:</p> <ul> <li> <code>type</code>               (<code>str</code>)           \u2013            <p>The type of skill point interaction (e.g., \"SkillPoint\", \"EnergyGenerate\").</p> </li> <li> <code>value</code>               (<code>int | None</code>)           \u2013            <p>The amount of skill points generated (positive) or consumed (negative), or energy generated.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>str</code>)             </li> <li> <code>value</code>                 (<code>int | None</code>)             </li> </ul>"},{"location":"models/#yatta.models.SkillPoint.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: str\n</code></pre>"},{"location":"models/#yatta.models.SkillPoint.value","title":"value  <code>pydantic-field</code>","text":"<pre><code>value: int | None\n</code></pre>"},{"location":"models/#yatta.models.SkillPromote","title":"SkillPromote  <code>pydantic-model</code>","text":"<p>Represent the cost to promote (level up) a skill/trace to a specific level.</p> <p>Attributes:</p> <ul> <li> <code>level</code>               (<code>int</code>)           \u2013            <p>The target level for the promotion.</p> </li> <li> <code>cost_items</code>               (<code>list[SkillPromoteCostItem]</code>)           \u2013            <p>A list of items required for this promotion.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>level</code>                 (<code>int</code>)             </li> <li> <code>cost_items</code>                 (<code>list[SkillPromoteCostItem]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_cost_items</code>                 \u2192                   <code>cost_items</code> </li> </ul>"},{"location":"models/#yatta.models.SkillPromote.cost_items","title":"cost_items  <code>pydantic-field</code>","text":"<pre><code>cost_items: list[SkillPromoteCostItem]\n</code></pre>"},{"location":"models/#yatta.models.SkillPromote.level","title":"level  <code>pydantic-field</code>","text":"<pre><code>level: int\n</code></pre>"},{"location":"models/#yatta.models.SkillPromoteCostItem","title":"SkillPromoteCostItem  <code>pydantic-model</code>","text":"<p>Represent an item and amount required for promoting (leveling up) a skill/trace.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The ID of the required item.</p> </li> <li> <code>amount</code>               (<code>int</code>)           \u2013            <p>The amount of the item required.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>amount</code>                 (<code>int</code>)             </li> </ul>"},{"location":"models/#yatta.models.SkillPromoteCostItem.amount","title":"amount  <code>pydantic-field</code>","text":"<pre><code>amount: int\n</code></pre>"},{"location":"models/#yatta.models.SkillPromoteCostItem.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.SkillTree","title":"SkillTree  <code>pydantic-model</code>","text":"<p>Represent a skill tree structure for a character.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The identifier for this skill tree.</p> </li> <li> <code>type</code>               (<code>str</code>)           \u2013            <p>The type of skill tree.</p> </li> <li> <code>tree</code>               (<code>list[SkillTreeSkill]</code>)           \u2013            <p>A list of skills/connections within the tree.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>type</code>                 (<code>str</code>)             </li> <li> <code>tree</code>                 (<code>list[SkillTreeSkill]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_tree</code>                 \u2192                   <code>tree</code> </li> </ul>"},{"location":"models/#yatta.models.SkillTree.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.SkillTree.tree","title":"tree  <code>pydantic-field</code>","text":"<pre><code>tree: list[SkillTreeSkill] = []\n</code></pre>"},{"location":"models/#yatta.models.SkillTree.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: str\n</code></pre>"},{"location":"models/#yatta.models.SkillTreeSkill","title":"SkillTreeSkill  <code>pydantic-model</code>","text":"<p>Represent a connection or node within a skill tree structure.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>The ID of the skill/trace node this connection points to or represents.</p> </li> <li> <code>points_direction</code>               (<code>str | None</code>)           \u2013            <p>The direction of the connection (optional).</p> </li> <li> <code>points</code>               (<code>list[int]</code>)           \u2013            <p>A list of connected skill/trace node IDs.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>points_direction</code>                 (<code>str | None</code>)             </li> <li> <code>points</code>                 (<code>list[int]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_points</code>                 \u2192                   <code>points</code> </li> </ul>"},{"location":"models/#yatta.models.SkillTreeSkill.id","title":"id  <code>pydantic-field</code>","text":"<pre><code>id: int\n</code></pre>"},{"location":"models/#yatta.models.SkillTreeSkill.points","title":"points  <code>pydantic-field</code>","text":"<pre><code>points: list[int]\n</code></pre>"},{"location":"models/#yatta.models.SkillTreeSkill.points_direction","title":"points_direction  <code>pydantic-field</code>","text":"<pre><code>points_direction: str | None\n</code></pre>"},{"location":"models/#yatta.models.Status","title":"Status  <code>pydantic-model</code>","text":"<p>Represent a status effect or stat bonus granted by a trace node.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the status or stat (e.g., \"HPAddedRatio\").</p> </li> <li> <code>value</code>               (<code>int | float</code>)           \u2013            <p>The value of the status or stat bonus.</p> </li> <li> <code>icon</code>               (<code>str</code>)           \u2013            <p>The URL to the icon representing the status or stat.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>value</code>                 (<code>int | float</code>)             </li> <li> <code>icon</code>                 (<code>str</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>__convert_icon</code>                 \u2192                   <code>icon</code> </li> </ul>"},{"location":"models/#yatta.models.Status.icon","title":"icon  <code>pydantic-field</code>","text":"<pre><code>icon: str\n</code></pre>"},{"location":"models/#yatta.models.Status.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"models/#yatta.models.Status.value","title":"value  <code>pydantic-field</code>","text":"<pre><code>value: int | float\n</code></pre>"},{"location":"models/#yatta.models.VoiceActor","title":"VoiceActor  <code>pydantic-model</code>","text":"<p>Represent a voice actor for a specific language.</p> <p>Attributes:</p> <ul> <li> <code>lang</code>               (<code>str</code>)           \u2013            <p>The language code (e.g., \"en\", \"jp\").</p> </li> <li> <code>name</code>               (<code>str | None</code>)           \u2013            <p>The name of the voice actor.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>lang</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"models/#yatta.models.VoiceActor.lang","title":"lang  <code>pydantic-field</code>","text":"<pre><code>lang: str\n</code></pre>"},{"location":"models/#yatta.models.VoiceActor.name","title":"name  <code>pydantic-field</code>","text":"<pre><code>name: str | None\n</code></pre>"},{"location":"models/#yatta.models.WeaknessBreak","title":"WeaknessBreak  <code>pydantic-model</code>","text":"<p>Represent the toughness damage dealt by a skill.</p> <p>Attributes:</p> <ul> <li> <code>type</code>               (<code>str</code>)           \u2013            <p>The type of weakness break (e.g., \"Skill\").</p> </li> <li> <code>value</code>               (<code>int</code>)           \u2013            <p>The amount of toughness damage dealt.</p> </li> </ul> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>str</code>)             </li> <li> <code>value</code>                 (<code>int</code>)             </li> </ul>"},{"location":"models/#yatta.models.WeaknessBreak.type","title":"type  <code>pydantic-field</code>","text":"<pre><code>type: str\n</code></pre>"},{"location":"models/#yatta.models.WeaknessBreak.value","title":"value  <code>pydantic-field</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"utils/","title":"API Reference","text":""},{"location":"utils/#yatta.utils","title":"utils","text":"<p>Functions:</p> <ul> <li> <code>find_next_letter</code>             \u2013              <p>Find the next letter after a placeholder in a string.</p> </li> <li> <code>format_str</code>             \u2013              <p>Format a string by removing HTML tags, sprite presets, and ruby tags, and replacing pronouns.</p> </li> <li> <code>remove_ruby_tags</code>             \u2013              <p>Remove ruby tags ({RUBY_B...} and {RUBY_E#}) from a string.</p> </li> <li> <code>replace_placeholders</code>             \u2013              <p>Replace placeholders in a string with values from parameters.</p> </li> <li> <code>replace_pronouns</code>             \u2013              <p>Replace gendered pronouns in the format {F#female}/{M#male} with a combined format.</p> </li> </ul>"},{"location":"utils/#yatta.utils.find_next_letter","title":"find_next_letter","text":"<pre><code>find_next_letter(text: str, placeholder: str) -&gt; str\n</code></pre> <p>Find the next letter after a placeholder in a string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The character immediately following the placeholder.</p> </li> </ul>"},{"location":"utils/#yatta.utils.find_next_letter(text)","title":"<code>text</code>","text":"(<code>str</code>)           \u2013            <p>The string to search within.</p>"},{"location":"utils/#yatta.utils.find_next_letter(placeholder)","title":"<code>placeholder</code>","text":"(<code>str</code>)           \u2013            <p>The placeholder string to find.</p>"},{"location":"utils/#yatta.utils.format_str","title":"format_str","text":"<pre><code>format_str(text: str) -&gt; str\n</code></pre> <p>Format a string by removing HTML tags, sprite presets, and ruby tags, and replacing pronouns.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The formatted string.</p> </li> </ul>"},{"location":"utils/#yatta.utils.format_str(text)","title":"<code>text</code>","text":"(<code>str</code>)           \u2013            <p>The input string to format.</p>"},{"location":"utils/#yatta.utils.remove_ruby_tags","title":"remove_ruby_tags","text":"<pre><code>remove_ruby_tags(text: str) -&gt; str\n</code></pre> <p>Remove ruby tags ({RUBY_B...} and {RUBY_E#}) from a string.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The string with ruby tags removed.</p> </li> </ul>"},{"location":"utils/#yatta.utils.remove_ruby_tags(text)","title":"<code>text</code>","text":"(<code>str</code>)           \u2013            <p>The input string containing ruby tags.</p>"},{"location":"utils/#yatta.utils.replace_placeholders","title":"replace_placeholders","text":"<pre><code>replace_placeholders(string: str, params: dict[str, list[float | int]] | list[int] | None) -&gt; str\n</code></pre> <p>Replace placeholders in a string with values from parameters.</p> <p>Handle both list-based and dictionary-based parameters. Multiply values by 100 if the character following the placeholder is '%'.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The string with placeholders replaced by values.</p> </li> </ul>"},{"location":"utils/#yatta.utils.replace_placeholders(string)","title":"<code>string</code>","text":"(<code>str</code>)           \u2013            <p>The string containing placeholders.</p>"},{"location":"utils/#yatta.utils.replace_placeholders(params)","title":"<code>params</code>","text":"(<code>dict[str, list[float | int]] | list[int] | None</code>)           \u2013            <p>A dictionary or list of parameters to substitute.</p>"},{"location":"utils/#yatta.utils.replace_pronouns","title":"replace_pronouns","text":"<pre><code>replace_pronouns(text: str) -&gt; str\n</code></pre> <p>Replace gendered pronouns in the format {F#female}/{M#male} with a combined format.</p> Example <p>\"{F#She}/{M#He} is here.\" -&gt; \"She/He is here.\"</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The string with pronouns replaced.</p> </li> </ul>"},{"location":"utils/#yatta.utils.replace_pronouns(text)","title":"<code>text</code>","text":"(<code>str</code>)           \u2013            <p>The input string containing pronouns.</p>"}]}